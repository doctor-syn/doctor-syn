fn sin(x: f64) -> f64 {
    let x = x * (1.0 / (std::f64::consts::PI));
    let xh = x + 0.5;
    let xr = x.round();
    let xhr = xh.round();
    let s = x - xr;
    let c = xh - xhr;
    let sr = (f64::from_bits(4533224211552522724u64))
        .mul_add(s * s, -f64::from_bits(4526904794657877694u64))
        .mul_add(s * s, f64::from_bits(4514765511010485662u64))
        .mul_add(s * s, f64::from_bits(4514972455596732655u64))
        .mul_add(s * s, -f64::from_bits(4537088310675991055u64))
        .mul_add(s * s, f64::from_bits(4557237389260074166u64))
        .mul_add(s * s, -f64::from_bits(4575147550484435461u64))
        .mul_add(s * s, f64::from_bits(4590583655612470010u64))
        .mul_add(s * s, -f64::from_bits(4603572914567167359u64))
        .mul_add(s * s, f64::from_bits(4612924877709880034u64))
        .mul_add(s * s, -f64::from_bits(4617504345765035603u64))
        .mul_add(s * s, f64::from_bits(4614256656552045849u64))
        * s;
    let cr = (-f64::from_bits(4541357127470134407u64))
        .mul_add(c * c, f64::from_bits(4535685821052114702u64))
        .mul_add(c * c, -f64::from_bits(4524238393972550510u64))
        .mul_add(c * c, f64::from_bits(4511902924251034042u64))
        .mul_add(c * c, -f64::from_bits(4526716360343400294u64))
        .mul_add(c * c, f64::from_bits(4547349409924260334u64))
        .mul_add(c * c, -f64::from_bits(4566541413855835108u64))
        .mul_add(c * c, f64::from_bits(4583095551421171033u64))
        .mul_add(c * c, -f64::from_bits(4597646699804080949u64))
        .mul_add(c * c, f64::from_bits(4608692308080902139u64))
        .mul_add(c * c, -f64::from_bits(4616255722032421572u64))
        .mul_add(c * c, f64::from_bits(4617242111765267935u64))
        .mul_add(c * c, -f64::from_bits(4607182418800017408u64));
    let ss = if (xr as i32) & 1 == 0 { sr } else { -sr };
    let cs = if (xhr as i32 & 1) == 0 { cr } else { -cr };
    if s.abs() <= 0.25 {
        ss
    } else {
        cs
    }
}
fn cos(x: f64) -> f64 {
    let x = x * (1.0 / (std::f64::consts::PI));
    let xh = x + 0.5;
    let xr = x.round();
    let xhr = xh.round();
    let c = x - xr;
    let s = xh - xhr;
    let sr = (f64::from_bits(4533224211552522724u64))
        .mul_add(s * s, -f64::from_bits(4526904794657877694u64))
        .mul_add(s * s, f64::from_bits(4514765511010485662u64))
        .mul_add(s * s, f64::from_bits(4514972455596732655u64))
        .mul_add(s * s, -f64::from_bits(4537088310675991055u64))
        .mul_add(s * s, f64::from_bits(4557237389260074166u64))
        .mul_add(s * s, -f64::from_bits(4575147550484435461u64))
        .mul_add(s * s, f64::from_bits(4590583655612470010u64))
        .mul_add(s * s, -f64::from_bits(4603572914567167359u64))
        .mul_add(s * s, f64::from_bits(4612924877709880034u64))
        .mul_add(s * s, -f64::from_bits(4617504345765035603u64))
        .mul_add(s * s, f64::from_bits(4614256656552045849u64))
        * s;
    let cr = (f64::from_bits(4541357127470134407u64))
        .mul_add(c * c, -f64::from_bits(4535685821052114702u64))
        .mul_add(c * c, f64::from_bits(4524238393972550510u64))
        .mul_add(c * c, -f64::from_bits(4511902924251034042u64))
        .mul_add(c * c, f64::from_bits(4526716360343400294u64))
        .mul_add(c * c, -f64::from_bits(4547349409924260334u64))
        .mul_add(c * c, f64::from_bits(4566541413855835108u64))
        .mul_add(c * c, -f64::from_bits(4583095551421171033u64))
        .mul_add(c * c, f64::from_bits(4597646699804080949u64))
        .mul_add(c * c, -f64::from_bits(4608692308080902139u64))
        .mul_add(c * c, f64::from_bits(4616255722032421572u64))
        .mul_add(c * c, -f64::from_bits(4617242111765267935u64))
        .mul_add(c * c, f64::from_bits(4607182418800017408u64));
    let ss = if xhr as i32 & 1 == 0 { sr } else { -sr };
    let cs = if xr as i32 & 1 == 0 { cr } else { -cr };
    if s.abs() <= 0.25 {
        ss
    } else {
        cs
    }
}
fn tan(x: f64) -> f64 {
    let x = x * (1.0 / (std::f64::consts::PI));
    let x = x - x.round();
    let recip = 1.0 / (x * x - 0.25);
    let y = (f64::from_bits(4549901540515839780u64))
        .mul_add(x * x, f64::from_bits(4547557008795039062u64))
        .mul_add(x * x, f64::from_bits(4556185136257495039u64))
        .mul_add(x * x, f64::from_bits(4561024676430096773u64))
        .mul_add(x * x, f64::from_bits(4566595257553950072u64))
        .mul_add(x * x, f64::from_bits(4571690344287319784u64))
        .mul_add(x * x, f64::from_bits(4576848978578225862u64))
        .mul_add(x * x, f64::from_bits(4582146134087783005u64))
        .mul_add(x * x, f64::from_bits(4587746560919616143u64))
        .mul_add(x * x, f64::from_bits(4594023599668773433u64))
        .mul_add(x * x, f64::from_bits(4603198861202799392u64))
        .mul_add(x * x, -f64::from_bits(4605249457297304857u64))
        * x;
    y * recip
}
fn sin_cos(x: f64) -> (f64, f64) {
    (sin(x), cos(x))
}
fn asin(x: f64) -> f64 {
    use std::f64::consts::PI;
    const LIM: f64 = 0.9;
    let c = if x < 0.0 { -PI / 2.0 } else { PI / 2.0 };
    let s = if x < 0.0 { -1.0 } else { 1.0 };
    let x0 = x;
    let x = if x * x < LIM * LIM {
        x
    } else {
        (1.0 - x * x).sqrt()
    };
    let y = (f64::from_bits(4690534182525587127u64))
        .mul_add(x * x, -f64::from_bits(4700212112434301535u64))
        .mul_add(x * x, f64::from_bits(4704243328180238847u64))
        .mul_add(x * x, -f64::from_bits(4704514864751779281u64))
        .mul_add(x * x, f64::from_bits(4701808148321154314u64))
        .mul_add(x * x, -f64::from_bits(4695277608197482747u64))
        .mul_add(x * x, f64::from_bits(4685754476322208609u64))
        .mul_add(x * x, -f64::from_bits(4672476222309414997u64))
        .mul_add(x * x, f64::from_bits(4654547021601194357u64))
        .mul_add(x * x, -f64::from_bits(4630313153960490170u64))
        .mul_add(x * x, f64::from_bits(4607793147765066132u64))
        * x;
    if x0 * x0 < LIM * LIM {
        y
    } else {
        c - y * s
    }
}
fn acos(x: f64) -> f64 {
    use std::f64::consts::PI;
    const LIM: f64 = 0.9;
    let c = if x < 0.0 { PI } else { 0.0 };
    let s = if x < 0.0 { 1.0 } else { -1.0 };
    let x0 = x;
    let x = if x * x < LIM * LIM {
        x
    } else {
        (1.0 - x * x).sqrt()
    };
    let y = (f64::from_bits(4690534182525587127u64))
        .mul_add(x * x, -f64::from_bits(4700212112434301535u64))
        .mul_add(x * x, f64::from_bits(4704243328180238847u64))
        .mul_add(x * x, -f64::from_bits(4704514864751779281u64))
        .mul_add(x * x, f64::from_bits(4701808148321154314u64))
        .mul_add(x * x, -f64::from_bits(4695277608197482747u64))
        .mul_add(x * x, f64::from_bits(4685754476322208609u64))
        .mul_add(x * x, -f64::from_bits(4672476222309414997u64))
        .mul_add(x * x, f64::from_bits(4654547021601194357u64))
        .mul_add(x * x, -f64::from_bits(4630313153960490170u64))
        .mul_add(x * x, f64::from_bits(4607793147765066132u64))
        * x;
    if x0 * x0 < LIM * LIM {
        PI / 2.0 - y
    } else {
        c - y * s
    }
}
fn atan(x: f64) -> f64 {
    use std::f64::consts::PI;
    const LIM: f64 = 1.0;
    let c = if x < 0.0 { -PI / 2.0 } else { PI / 2.0 };
    let small = x.abs() < LIM;
    let x = if small { x } else { x.recip() };
    let y = (-f64::from_bits(4659079954881651500u64))
        .mul_add(x * x, f64::from_bits(4670822117714027693u64))
        .mul_add(x * x, -f64::from_bits(4676765236172076988u64))
        .mul_add(x * x, f64::from_bits(4679457925793708436u64))
        .mul_add(x * x, -f64::from_bits(4678631991577214167u64))
        .mul_add(x * x, f64::from_bits(4674930837160800148u64))
        .mul_add(x * x, -f64::from_bits(4667672739667659929u64))
        .mul_add(x * x, f64::from_bits(4657210997101575602u64))
        .mul_add(x * x, -f64::from_bits(4641416168158307381u64))
        .mul_add(x * x, f64::from_bits(4618552871270270295u64))
        .mul_add(x * x, f64::from_bits(4606913040707829803u64))
        * x;
    if small {
        y
    } else {
        c - y
    }
}
fn atan2(y: f64, x: f64) -> f64 {
    use std::f64::consts::PI;
    let offset180 = if y < 0.0 { -PI } else { PI };
    let (x, y, offset) = if x < 0.0 {
        (-x, -y, offset180)
    } else {
        (x, y, 0.0)
    };
    let offset90 = if y < 0.0 { -PI / 2.0 } else { PI / 2.0 };
    let (x, y, offset) = if y.abs() > x {
        (y, -x, offset + offset90)
    } else {
        (x, y, offset)
    };
    let x = y / x;
    let y = (-f64::from_bits(4636434794689395165u64))
        .mul_add(x * x, f64::from_bits(4646184278903766744u64))
        .mul_add(x * x, -f64::from_bits(4649962064133363501u64))
        .mul_add(x * x, f64::from_bits(4649496196072120970u64))
        .mul_add(x * x, -f64::from_bits(4644940994673329335u64))
        .mul_add(x * x, f64::from_bits(4635608703289390796u64))
        .mul_add(x * x, -f64::from_bits(4618711162890210002u64))
        .mul_add(x * x, f64::from_bits(4607430049864428272u64))
        * x;
    y + offset
}
fn exp(x: f64) -> f64 {
    exp2(x * std::f64::consts::LOG2_E)
}
fn exp2(x: f64) -> f64 {
    let r = x.round();
    let mul = f64::from_bits(
        (r.mul_add(0x0010000000000000_u64 as f64, 0x3ff0000000000000_u64 as f64)) as u64,
    );
    let x = x - r;
    (f64::from_bits(4549839347750377909u64))
        .mul_add(x, f64::from_bits(4563827094295188139u64))
        .mul_add(x, f64::from_bits(4576698039041613846u64))
        .mul_add(x, f64::from_bits(4588159642448921967u64))
        .mul_add(x, f64::from_bits(4597823092488205992u64))
        .mul_add(x, f64::from_bits(4604418534717280147u64))
        .mul_add(x, f64::from_bits(4607182418800017408u64))
        * mul
}
fn exp_m1(x: f64) -> f64 {
    let x = x * std::f64::consts::LOG2_E;
    let r = x.round();
    let mul = f64::from_bits(
        (r.mul_add(0x0010000000000000_u64 as f64, 0x3ff0000000000000_u64 as f64)) as u64,
    );
    let x = x - r;
    (f64::from_bits(4549839347750377909u64))
        .mul_add(x, f64::from_bits(4563827094295188139u64))
        .mul_add(x, f64::from_bits(4576698039041613846u64))
        .mul_add(x, f64::from_bits(4588159642448921967u64))
        .mul_add(x, f64::from_bits(4597823092488205992u64))
        .mul_add(x, f64::from_bits(4604418534717280147u64))
        .mul_add(x, f64::from_bits(0u64))
        * mul
        + (mul - 1.0)
}
fn ln(x: f64) -> f64 {
    log2(x) * (1.0 / std::f64::consts::LOG2_E)
}
fn ln_1p(x: f64) -> f64 {
    let exponent = ((x + 1.0).to_bits() >> 23) as i32 - 0x7f;
    let x = if exponent == 0 {
        x
    } else {
        f64::from_bits(((x + 1.0).to_bits() & 0x7fffff) | 0x3f800000) - 1.0
    };
    let y: f64 = (-f64::from_bits(4576269536088555964u64))
        .mul_add(x, f64::from_bits(4587455337473063236u64))
        .mul_add(x, -f64::from_bits(4594058266753340196u64))
        .mul_add(x, f64::from_bits(4597847348723964370u64))
        .mul_add(x, -f64::from_bits(4599925348302248857u64))
        .mul_add(x, f64::from_bits(4602295763773620223u64))
        .mul_add(x, -f64::from_bits(4604671077998866033u64))
        .mul_add(x, f64::from_bits(4609176123354504067u64))
        .mul_add(x, f64::from_bits(0u64));
    (y + (exponent as f64)) * (1.0 / std::f64::consts::LOG2_E)
}
fn log2(x: f64) -> f64 {
    let exponent = (x.to_bits() >> 23) as i32 - 0x7f;
    let x =
        f64::from_bits((x.to_bits() & (0x0010000000000000_u64 - 1)) | 0x3ff0000000000000_u64) - 1.5;
    let y: f64 = (-f64::from_bits(4576269536088555964u64))
        .mul_add(x, f64::from_bits(4579868030300118562u64))
        .mul_add(x, -f64::from_bits(4581623278126239311u64))
        .mul_add(x, f64::from_bits(4585538538473384766u64))
        .mul_add(x, -f64::from_bits(4589800551434817663u64))
        .mul_add(x, f64::from_bits(4594303734940401008u64))
        .mul_add(x, -f64::from_bits(4599447002216002930u64))
        .mul_add(x, f64::from_bits(4606838302384517873u64))
        .mul_add(x, f64::from_bits(4603444093345823441u64));
    y + (exponent as f64)
}
fn log10(x: f64) -> f64 {
    log2(x) * (1.0 / std::f64::consts::LOG2_10)
}
fn log(x: f64, base: f64) -> f64 {
    log2(x) / log2(base)
}
fn powi(x: f64, y: i32) -> f64 {
    let a = x;
    let p = y.abs();
    let b = if (p & (1 << 0)) != 0 { a } else { 1.0 };
    let a = a * a;
    let b = if (p & (1 << 1)) != 0 { b * a } else { b };
    let a = a * a;
    let b = if (p & (1 << 2)) != 0 { b * a } else { b };
    let a = a * a;
    let b = if (p & (1 << 3)) != 0 { b * a } else { b };
    let b = if p < 16 { b } else { powf(x, p as f64) };
    if y < 0 {
        recip(b)
    } else {
        b
    }
}
fn powf(x: f64, y: f64) -> f64 {
    exp2(log2(x) * y)
}
fn sinh(x: f64) -> f64 {
    let a = x.mul_add(std::f64::consts::LOG2_E, -1.0);
    let b = x.mul_add(-std::f64::consts::LOG2_E, -1.0);
    exp2(a) - exp2(b)
}
fn cosh(x: f64) -> f64 {
    let a = x.mul_add(std::f64::consts::LOG2_E, -1.0);
    let b = x.mul_add(-std::f64::consts::LOG2_E, -1.0);
    exp2(a) + exp2(b)
}
fn tanh(x: f64) -> f64 {
    let exp2x = exp2(x * (std::f64::consts::LOG2_E * 2.0));
    (exp2x - 1.0) / (exp2x + 1.0)
}
fn asinh(x: f64) -> f64 {
    ln(x + (x * x + 1.0).sqrt())
}
fn acosh(x: f64) -> f64 {
    ln(x + (x * x - 1.0).sqrt())
}
fn atanh(x: f64) -> f64 {
    (ln(1.0 + x) - ln(1.0 - x)) * 0.5
}
fn sqrt(x: f64) -> f64 {
    let r = sqrt_approx(x);
    let y = r + (x - r * r) / (2.0 * r);
    y
}
fn cbrt(x: f64) -> f64 {
    let r = cbrt_approx(x.abs());
    let y = r + (x.abs() - r * r * r) / (3.0 * r * r);
    y.copysign(x)
}
fn hypot(x: f64, y: f64) -> f64 {
    let (x, y) = if x.abs() > y.abs() { (x, y) } else { (y, x) };
    if x.abs() <= f64::MIN_POSITIVE {
        x
    } else {
        x.abs() * (1.0 + (y / x) * (y / x)).sqrt()
    }
}
fn recip(x: f64) -> f64 {
    let r = recip_approx(x);
    let r = r * (2.0 - x * r);
    let r = r * (2.0 - x * r);
    let r = r * (2.0 - x * r);
    r
}
fn recip_approx(x: f64) -> f64 {
    let y = f64::from_bits(
        ((x.abs().to_bits() as f64).mul_add(-1.0, 0x3ff0000000000000_u64 as f64 * 2.0)) as u64,
    );
    (y - 0.08).copysign(x)
}
fn sqrt_approx(x: f64) -> f64 {
    let y = f64::from_bits(
        ((x.abs().to_bits() as f64).mul_add(0.5, 0x3ff0000000000000_u64 as f64 * 0.5)) as u64,
    );
    y - 0.08
}
fn cbrt_approx(x: f64) -> f64 {
    let y = f64::from_bits(
        ((x.abs().to_bits() as f64).mul_add(1.0 / 3.0, 0x3ff0000000000000_u64 as f64 * 2.0 / 3.0))
            as u64,
    );
    (y - 0.08).copysign(x)
}
#[test]
fn test_sin() {
    let accurate_values: &[(f64, f64)] = &[
        (-3.0925052683774528f64, -0.04906767432741773f64),
        (-3.043417883165112f64, -0.0980171403295608f64),
        (-2.9943304979527716f64, -0.14673047445536141f64),
        (-2.945243112740431f64, -0.19509032201612841f64),
        (-2.8961557275280905f64, -0.2429801799032645f64),
        (-2.84706834231575f64, -0.29028467725446244f64),
        (-2.7979809571034093f64, -0.33688985339222055f64),
        (-2.748893571891069f64, -0.3826834323650898f64),
        (-2.6998061866787286f64, -0.42755509343028164f64),
        (-2.650718801466388f64, -0.4713967368259976f64),
        (-2.6016314162540475f64, -0.5141027441932221f64),
        (-2.552544031041707f64, -0.5555702330196022f64),
        (-2.5034566458293663f64, -0.5956993044924336f64),
        (-2.454369260617026f64, -0.6343932841636454f64),
        (-2.405281875404685f64, -0.6715589548470187f64),
        (-2.356194490192345f64, -0.7071067811865475f64),
        (-2.3071071049800045f64, -0.7409511253549592f64),
        (-2.2580197197676637f64, -0.7730104533627368f64),
        (-2.2089323345553233f64, -0.803207531480645f64),
        (-2.1598449493429825f64, -0.8314696123025451f64),
        (-2.110757564130642f64, -0.8577286100002721f64),
        (-2.061670178918302f64, -0.8819212643483549f64),
        (-2.0125827937059615f64, -0.9039892931234434f64),
        (-1.9634954084936207f64, -0.9238795325112865f64),
        (-1.9144080232812801f64, -0.9415440651830208f64),
        (-1.8653206380689396f64, -0.9569403357322087f64),
        (-1.8162332528565992f64, -0.9700312531945439f64),
        (-1.7671458676442586f64, -0.9807852804032303f64),
        (-1.718058482431918f64, -0.9891765099647809f64),
        (-1.6689710972195777f64, -0.9951847266721968f64),
        (-1.6198837120072371f64, -0.9987954562051723f64),
        (-1.5707963267948966f64, -1f64),
        (-1.521708941582556f64, -0.9987954562051723f64),
        (-1.4726215563702154f64, -0.9951847266721968f64),
        (-1.423534171157875f64, -0.9891765099647809f64),
        (-1.3744467859455345f64, -0.9807852804032302f64),
        (-1.325359400733194f64, -0.9700312531945439f64),
        (-1.2762720155208536f64, -0.9569403357322088f64),
        (-1.227184630308513f64, -0.9415440651830207f64),
        (-1.1780972450961724f64, -0.9238795325112864f64),
        (-1.129009859883832f64, -0.9039892931234432f64),
        (-1.0799224746714913f64, -0.8819212643483547f64),
        (-1.030835089459151f64, -0.857728610000272f64),
        (-0.9817477042468106f64, -0.8314696123025452f64),
        (-0.9326603190344698f64, -0.8032075314806447f64),
        (-0.8835729338221294f64, -0.773010453362737f64),
        (-0.8344855486097886f64, -0.7409511253549589f64),
        (-0.7853981633974483f64, -0.7071067811865475f64),
        (-0.7363107781851079f64, -0.6715589548470183f64),
        (-0.6872233929727671f64, -0.6343932841636453f64),
        (-0.6381360077604268f64, -0.5956993044924334f64),
        (-0.589048622548086f64, -0.555570233019602f64),
        (-0.5399612373357456f64, -0.5141027441932216f64),
        (-0.4908738521234053f64, -0.4713967368259977f64),
        (-0.4417864669110645f64, -0.4275550934302819f64),
        (-0.39269908169872414f64, -0.3826834323650897f64),
        (-0.3436116964863838f64, -0.33688985339222016f64),
        (-0.294524311274043f64, -0.2902846772544622f64),
        (-0.24543692606170264f64, -0.24298017990326387f64),
        (-0.1963495408493623f64, -0.19509032201612847f64),
        (-0.1472621556370215f64, -0.1467304744553617f64),
        (-0.09817477042468115f64, -0.09801714032956071f64),
        (-0.04908738521234035f64, -0.04906767432741784f64),
        (0f64, 0f64),
        (0.04908738521234035f64, 0.04906767432741784f64),
        (0.09817477042468115f64, 0.09801714032956071f64),
        (0.1472621556370215f64, 0.1467304744553617f64),
        (0.1963495408493623f64, 0.19509032201612847f64),
        (0.24543692606170264f64, 0.24298017990326387f64),
        (0.294524311274043f64, 0.2902846772544622f64),
        (0.3436116964863838f64, 0.33688985339222016f64),
        (0.39269908169872414f64, 0.3826834323650897f64),
        (0.4417864669110645f64, 0.4275550934302819f64),
        (0.4908738521234053f64, 0.4713967368259977f64),
        (0.5399612373357456f64, 0.5141027441932216f64),
        (0.589048622548086f64, 0.555570233019602f64),
        (0.6381360077604268f64, 0.5956993044924334f64),
        (0.6872233929727671f64, 0.6343932841636453f64),
        (0.7363107781851079f64, 0.6715589548470183f64),
        (0.7853981633974483f64, 0.7071067811865475f64),
        (0.8344855486097886f64, 0.7409511253549589f64),
        (0.883572933822129f64, 0.7730104533627367f64),
        (0.9326603190344702f64, 0.803207531480645f64),
        (0.9817477042468106f64, 0.8314696123025452f64),
        (1.030835089459151f64, 0.857728610000272f64),
        (1.0799224746714913f64, 0.8819212643483547f64),
        (1.1290098598838316f64, 0.9039892931234432f64),
        (1.178097245096172f64, 0.9238795325112864f64),
        (1.2271846303085132f64, 0.9415440651830207f64),
        (1.2762720155208536f64, 0.9569403357322088f64),
        (1.325359400733194f64, 0.9700312531945439f64),
        (1.3744467859455343f64, 0.9807852804032302f64),
        (1.4235341711578746f64, 0.9891765099647809f64),
        (1.4726215563702159f64, 0.9951847266721968f64),
        (1.5217089415825562f64, 0.9987954562051723f64),
        (1.5707963267948966f64, 1f64),
        (1.619883712007237f64, 0.9987954562051723f64),
        (1.6689710972195773f64, 0.9951847266721968f64),
        (1.7180584824319185f64, 0.9891765099647809f64),
        (1.7671458676442588f64, 0.9807852804032303f64),
        (1.8162332528565992f64, 0.9700312531945439f64),
        (1.8653206380689396f64, 0.9569403357322087f64),
        (1.91440802328128f64, 0.9415440651830208f64),
        (1.9634954084936211f64, 0.9238795325112865f64),
        (2.0125827937059615f64, 0.9039892931234434f64),
        (2.061670178918302f64, 0.8819212643483549f64),
        (2.110757564130642f64, 0.8577286100002721f64),
        (2.1598449493429825f64, 0.8314696123025451f64),
        (2.208932334555323f64, 0.803207531480645f64),
        (2.258019719767664f64, 0.7730104533627368f64),
        (2.3071071049800045f64, 0.7409511253549592f64),
        (2.356194490192345f64, 0.7071067811865475f64),
        (2.405281875404685f64, 0.6715589548470187f64),
        (2.4543692606170255f64, 0.6343932841636454f64),
        (2.5034566458293668f64, 0.5956993044924328f64),
        (2.552544031041707f64, 0.5555702330196022f64),
        (2.6016314162540475f64, 0.5141027441932221f64),
        (2.650718801466388f64, 0.4713967368259976f64),
        (2.699806186678728f64, 0.4275550934302826f64),
        (2.7488935718910685f64, 0.3826834323650898f64),
        (2.7979809571034098f64, 0.33688985339221966f64),
        (2.84706834231575f64, 0.29028467725446244f64),
        (2.8961557275280905f64, 0.2429801799032645f64),
        (2.945243112740431f64, 0.19509032201612841f64),
        (2.994330497952771f64, 0.14673047445536241f64),
        (3.0434178831651124f64, 0.0980171403295608f64),
        (3.0925052683774528f64, 0.04906767432741773f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.sin();
        let y2 = sin(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 0.0000000000000006661338147750939f64);
    const N: i32 = 0x100000;
    let tmin = -3.141592653589793f64;
    let tmax = 3.141592653589793f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.sin();
        let y2 = sin(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 0.0000000000000006661338147750939f64);
}
#[test]
fn test_cos() {
    let accurate_values: &[(f64, f64)] = &[
        (-3.0925052683774528f64, -0.9987954562051723f64),
        (-3.043417883165112f64, -0.9951847266721968f64),
        (-2.9943304979527716f64, -0.9891765099647809f64),
        (-2.945243112740431f64, -0.9807852804032303f64),
        (-2.8961557275280905f64, -0.9700312531945438f64),
        (-2.84706834231575f64, -0.9569403357322087f64),
        (-2.7979809571034093f64, -0.9415440651830205f64),
        (-2.748893571891069f64, -0.9238795325112867f64),
        (-2.6998061866787286f64, -0.9039892931234436f64),
        (-2.650718801466388f64, -0.8819212643483549f64),
        (-2.6016314162540475f64, -0.8577286100002718f64),
        (-2.552544031041707f64, -0.8314696123025451f64),
        (-2.5034566458293663f64, -0.8032075314806445f64),
        (-2.454369260617026f64, -0.773010453362737f64),
        (-2.405281875404685f64, -0.7409511253549588f64),
        (-2.356194490192345f64, -0.7071067811865475f64),
        (-2.3071071049800045f64, -0.6715589548470181f64),
        (-2.2580197197676637f64, -0.6343932841636456f64),
        (-2.2089323345553233f64, -0.5956993044924329f64),
        (-2.1598449493429825f64, -0.5555702330196023f64),
        (-2.110757564130642f64, -0.5141027441932214f64),
        (-2.061670178918302f64, -0.47139673682599775f64),
        (-2.0125827937059615f64, -0.4275550934302818f64),
        (-1.9634954084936207f64, -0.38268343236509f64),
        (-1.9144080232812801f64, -0.3368898533922198f64),
        (-1.8653206380689396f64, -0.2902846772544626f64),
        (-1.8162332528565992f64, -0.24298017990326365f64),
        (-1.7671458676442586f64, -0.19509032201612855f64),
        (-1.718058482431918f64, -0.14673047445536155f64),
        (-1.6689710972195777f64, -0.09801714032956094f64),
        (-1.6198837120072371f64, -0.049067674327417876f64),
        (
            -1.5707963267948966f64,
            -0.00000000000000038076899999999996f64,
        ),
        (-1.521708941582556f64, 0.049067674327418105f64),
        (-1.4726215563702154f64, 0.09801714032956117f64),
        (-1.423534171157875f64, 0.1467304744553618f64),
        (-1.3744467859455345f64, 0.19509032201612878f64),
        (-1.325359400733194f64, 0.24298017990326387f64),
        (-1.2762720155208536f64, 0.29028467725446183f64),
        (-1.227184630308513f64, 0.33688985339222005f64),
        (-1.1780972450961724f64, 0.38268343236509017f64),
        (-1.129009859883832f64, 0.427555093430282f64),
        (-1.0799224746714913f64, 0.47139673682599803f64),
        (-1.030835089459151f64, 0.5141027441932217f64),
        (-0.9817477042468106f64, 0.555570233019602f64),
        (-0.9326603190344698f64, 0.5956993044924334f64),
        (-0.8835729338221294f64, 0.6343932841636454f64),
        (-0.8344855486097886f64, 0.6715589548470184f64),
        (-0.7853981633974483f64, 0.7071067811865475f64),
        (-0.7363107781851079f64, 0.740951125354959f64),
        (-0.6872233929727671f64, 0.773010453362737f64),
        (-0.6381360077604268f64, 0.8032075314806447f64),
        (-0.589048622548086f64, 0.8314696123025452f64),
        (-0.5399612373357456f64, 0.857728610000272f64),
        (-0.4908738521234053f64, 0.8819212643483549f64),
        (-0.4417864669110645f64, 0.9039892931234432f64),
        (-0.39269908169872414f64, 0.9238795325112867f64),
        (-0.3436116964863838f64, 0.9415440651830206f64),
        (-0.294524311274043f64, 0.9569403357322088f64),
        (-0.24543692606170264f64, 0.9700312531945439f64),
        (-0.1963495408493623f64, 0.9807852804032303f64),
        (-0.1472621556370215f64, 0.9891765099647809f64),
        (-0.09817477042468115f64, 0.9951847266721968f64),
        (-0.04908738521234035f64, 0.9987954562051723f64),
        (0f64, 1f64),
        (0.04908738521234035f64, 0.9987954562051723f64),
        (0.09817477042468115f64, 0.9951847266721968f64),
        (0.1472621556370215f64, 0.9891765099647809f64),
        (0.1963495408493623f64, 0.9807852804032303f64),
        (0.24543692606170264f64, 0.9700312531945439f64),
        (0.294524311274043f64, 0.9569403357322088f64),
        (0.3436116964863838f64, 0.9415440651830206f64),
        (0.39269908169872414f64, 0.9238795325112867f64),
        (0.4417864669110645f64, 0.9039892931234432f64),
        (0.4908738521234053f64, 0.8819212643483549f64),
        (0.5399612373357456f64, 0.857728610000272f64),
        (0.589048622548086f64, 0.8314696123025452f64),
        (0.6381360077604268f64, 0.8032075314806447f64),
        (0.6872233929727671f64, 0.773010453362737f64),
        (0.7363107781851079f64, 0.740951125354959f64),
        (0.7853981633974483f64, 0.7071067811865475f64),
        (0.8344855486097886f64, 0.6715589548470184f64),
        (0.883572933822129f64, 0.6343932841636457f64),
        (0.9326603190344702f64, 0.5956993044924329f64),
        (0.9817477042468106f64, 0.555570233019602f64),
        (1.030835089459151f64, 0.5141027441932217f64),
        (1.0799224746714913f64, 0.47139673682599803f64),
        (1.1290098598838316f64, 0.427555093430282f64),
        (1.178097245096172f64, 0.38268343236509017f64),
        (1.2271846303085132f64, 0.33688985339222005f64),
        (1.2762720155208536f64, 0.29028467725446183f64),
        (1.325359400733194f64, 0.24298017990326387f64),
        (1.3744467859455343f64, 0.19509032201612878f64),
        (1.4235341711578746f64, 0.1467304744553618f64),
        (1.4726215563702159f64, 0.09801714032956017f64),
        (1.5217089415825562f64, 0.049067674327418105f64),
        (
            1.5707963267948966f64,
            -0.00000000000000038076899999999996f64,
        ),
        (1.619883712007237f64, -0.049067674327417876f64),
        (1.6689710972195773f64, -0.09801714032955994f64),
        (1.7180584824319185f64, -0.14673047445536155f64),
        (1.7671458676442588f64, -0.19509032201612855f64),
        (1.8162332528565992f64, -0.24298017990326365f64),
        (1.8653206380689396f64, -0.2902846772544626f64),
        (1.91440802328128f64, -0.3368898533922198f64),
        (1.9634954084936211f64, -0.38268343236509f64),
        (2.0125827937059615f64, -0.4275550934302818f64),
        (2.061670178918302f64, -0.47139673682599775f64),
        (2.110757564130642f64, -0.5141027441932214f64),
        (2.1598449493429825f64, -0.5555702330196023f64),
        (2.208932334555323f64, -0.5956993044924329f64),
        (2.258019719767664f64, -0.6343932841636456f64),
        (2.3071071049800045f64, -0.6715589548470181f64),
        (2.356194490192345f64, -0.7071067811865475f64),
        (2.405281875404685f64, -0.7409511253549588f64),
        (2.4543692606170255f64, -0.773010453362737f64),
        (2.5034566458293668f64, -0.803207531480645f64),
        (2.552544031041707f64, -0.8314696123025451f64),
        (2.6016314162540475f64, -0.8577286100002718f64),
        (2.650718801466388f64, -0.8819212643483549f64),
        (2.699806186678728f64, -0.903989293123443f64),
        (2.7488935718910685f64, -0.9238795325112867f64),
        (2.7979809571034098f64, -0.9415440651830208f64),
        (2.84706834231575f64, -0.9569403357322087f64),
        (2.8961557275280905f64, -0.9700312531945438f64),
        (2.945243112740431f64, -0.9807852804032303f64),
        (2.994330497952771f64, -0.9891765099647808f64),
        (3.0434178831651124f64, -0.9951847266721968f64),
        (3.0925052683774528f64, -0.9987954562051723f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.cos();
        let y2 = cos(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 0.0000000000000008881784197001252f64);
    const N: i32 = 0x100000;
    let tmin = -3.141592653589793f64;
    let tmax = 3.141592653589793f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.cos();
        let y2 = cos(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 0.0000000000000008881784197001252f64);
}
#[test]
fn test_tan() {
    let accurate_values: &[(f64, f64)] = &[
        (-0.7731263170943632f64, -0.9757526499323764f64),
        (-0.760854470791278f64, -0.9520791467009251f64),
        (-0.7485826244881929f64, -0.9289524733703672f64),
        (-0.7363107781851077f64, -0.9063471690191467f64),
        (-0.7240389318820226f64, -0.8842392152253495f64),
        (-0.7117670855789375f64, -0.8626059322567396f64),
        (-0.6994952392758523f64, -0.8414258840072545f64),
        (-0.6872233929727672f64, -0.82067879082866f64),
        (-0.6749515466696822f64, -0.8003454494993201f64),
        (-0.662679700366597f64, -0.7804076596539434f64),
        (-0.6504078540635119f64, -0.7608481560702511f64),
        (-0.6381360077604268f64, -0.7416505462720352f64),
        (-0.6258641614573416f64, -0.7227992529642058f64),
        (-0.6135923151542565f64, -0.704279460865044f64),
        (-0.6013204688511713f64, -0.6860770675448626f64),
        (-0.5890486225480862f64, -0.6681786379192988f64),
        (-0.5767767762450011f64, -0.6505713620801531f64),
        (-0.5645049299419159f64, -0.633243016177569f64),
        (-0.5522330836388308f64, -0.6161819260948659f64),
        (-0.5399612373357456f64, -0.5993769336819235f64),
        (-0.5276893910326605f64, -0.5828173653349759f64),
        (-0.5154175447295755f64, -0.566493002730344f64),
        (-0.5031456984264904f64, -0.550394055537264f64),
        (-0.4908738521234052f64, -0.5345111359507916f64),
        (-0.47860200582032003f64, -0.5188352348999755f64),
        (-0.4663301595172349f64, -0.503357699799294f64),
        (-0.4540583132141498f64, -0.48807021372286274f64),
        (-0.44178646691106466f64, -0.47296477589131986f64),
        (-0.4295146206079795f64, -0.45803368337067224f64),
        (-0.4172427743048944f64, -0.4432695138908642f64),
        (-0.4049709280018093f64, -0.42866510969949945f64),
        (-0.39269908169872414f64, -0.41421356237309487f64),
        (-0.380427235395639f64, -0.39990819851453707f64),
        (-0.36815538909255385f64, -0.38574256627112113f64),
        (-0.35588354278946877f64, -0.37171042261274334f64),
        (-0.3436116964863836f64, -0.357805721314524f64),
        (-0.3313398501832985f64, -0.3440226015924262f64),
        (-0.3190680038802134f64, -0.33035537734433384f64),
        (-0.30679615757712825f64, -0.31679852695260363f64),
        (-0.2945243112740431f64, -0.30334668360734235f64),
        (-0.282252464970958f64, -0.28999462611260607f64),
        (-0.2699806186678728f64, -0.2767372701404142f64),
        (-0.25770877236478773f64, -0.26356965989991793f64),
        (-0.24543692606170264f64, -0.2504869601913054f64),
        (-0.23316507975861744f64, -0.23748444881607003f64),
        (-0.22089323345553236f64, -0.22455750931712934f64),
        (-0.20862138715244716f64, -0.2117016240239833f64),
        (-0.19634954084936207f64, -0.19891236737965798f64),
        (-0.18407769454627698f64, -0.18618539952758376f64),
        (-0.17180584824319178f64, -0.17351646013785568f64),
        (-0.1595340019401067f64, -0.16090136245348916f64),
        (-0.1472621556370215f64, -0.14833598753834734f64),
        (-0.1349903093339364f64, -0.13581627870938767f64),
        (-0.12271846303085132f64, -0.12333823613673865f64),
        (-0.11044661672776612f64, -0.11089791159591293f64),
        (-0.09817477042468103f64, -0.09849140335716422f64),
        (-0.08590292412159595f64, -0.08611485119762793f64),
        (-0.07363107781851075f64, -0.07376443152244924f64),
        (-0.06135923151542566f64, -0.06143635258159375f64),
        (-0.04908738521234057f64, -0.04912684976946729f64),
        (-0.036815538909255374f64, -0.036832180994845615f64),
        (-0.024543692606170286f64, -0.02454862210892547f64),
        (-0.012271846303085088f64, -0.012272462379566232f64),
        (0f64, 0f64),
        (0.012271846303085088f64, 0.012272462379566232f64),
        (0.024543692606170286f64, 0.02454862210892547f64),
        (0.036815538909255374f64, 0.036832180994845615f64),
        (0.04908738521234057f64, 0.04912684976946729f64),
        (0.06135923151542566f64, 0.06143635258159375f64),
        (0.07363107781851075f64, 0.07376443152244924f64),
        (0.08590292412159595f64, 0.08611485119762793f64),
        (0.09817477042468103f64, 0.09849140335716422f64),
        (0.11044661672776612f64, 0.11089791159591293f64),
        (0.12271846303085132f64, 0.12333823613673865f64),
        (0.1349903093339364f64, 0.13581627870938767f64),
        (0.1472621556370215f64, 0.14833598753834734f64),
        (0.1595340019401067f64, 0.16090136245348916f64),
        (0.17180584824319178f64, 0.17351646013785568f64),
        (0.18407769454627698f64, 0.18618539952758376f64),
        (0.19634954084936207f64, 0.19891236737965798f64),
        (0.20862138715244716f64, 0.2117016240239833f64),
        (0.22089323345553225f64, 0.22455750931712914f64),
        (0.23316507975861755f64, 0.23748444881607028f64),
        (0.24543692606170264f64, 0.2504869601913054f64),
        (0.25770877236478773f64, 0.26356965989991793f64),
        (0.2699806186678728f64, 0.2767372701404142f64),
        (0.2822524649709579f64, 0.28999462611260596f64),
        (0.294524311274043f64, 0.3033466836073422f64),
        (0.3067961575771283f64, 0.31679852695260374f64),
        (0.3190680038802134f64, 0.33035537734433384f64),
        (0.3313398501832985f64, 0.3440226015924262f64),
        (0.34361169648638357f64, 0.357805721314524f64),
        (0.35588354278946865f64, 0.3717104226127433f64),
        (0.36815538909255396f64, 0.38574256627112125f64),
        (0.38042723539563905f64, 0.3999081985145372f64),
        (0.39269908169872414f64, 0.41421356237309487f64),
        (0.4049709280018092f64, 0.4286651096994993f64),
        (0.4172427743048943f64, 0.4432695138908641f64),
        (0.4295146206079796f64, 0.4580336833706724f64),
        (0.4417864669110647f64, 0.47296477589131986f64),
        (0.4540583132141498f64, 0.48807021372286274f64),
        (0.4663301595172349f64, 0.503357699799294f64),
        (0.47860200582032f64, 0.5188352348999755f64),
        (0.4908738521234053f64, 0.5345111359507916f64),
        (0.5031456984264904f64, 0.550394055537264f64),
        (0.5154175447295755f64, 0.566493002730344f64),
        (0.5276893910326605f64, 0.5828173653349759f64),
        (0.5399612373357456f64, 0.5993769336819235f64),
        (0.5522330836388307f64, 0.6161819260948658f64),
        (0.564504929941916f64, 0.6332430161775691f64),
        (0.5767767762450011f64, 0.6505713620801531f64),
        (0.5890486225480862f64, 0.6681786379192988f64),
        (0.6013204688511713f64, 0.6860770675448626f64),
        (0.6135923151542564f64, 0.704279460865044f64),
        (0.6258641614573417f64, 0.7227992529642059f64),
        (0.6381360077604268f64, 0.7416505462720352f64),
        (0.6504078540635119f64, 0.7608481560702511f64),
        (0.662679700366597f64, 0.7804076596539434f64),
        (0.674951546669682f64, 0.8003454494993196f64),
        (0.6872233929727671f64, 0.8206787908286598f64),
        (0.6994952392758524f64, 0.8414258840072546f64),
        (0.7117670855789375f64, 0.8626059322567396f64),
        (0.7240389318820226f64, 0.8842392152253495f64),
        (0.7363107781851077f64, 0.9063471690191467f64),
        (0.7485826244881928f64, 0.928952473370367f64),
        (0.7608544707912781f64, 0.9520791467009253f64),
        (0.7731263170943632f64, 0.9757526499323764f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.tan();
        let y2 = tan(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 0.0000000000000013322676295501878f64);
    const N: i32 = 0x100000;
    let tmin = -0.7853981633974483f64;
    let tmax = 0.7853981633974483f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.tan();
        let y2 = tan(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 0.0000000000000013322676295501878f64);
}
#[test]
fn test_sin_cos_1() {
    let accurate_values: &[(f64, f64)] = &[
        (-3.0925052683774528f64, -0.04906767432741773f64),
        (-3.043417883165112f64, -0.0980171403295608f64),
        (-2.9943304979527716f64, -0.14673047445536141f64),
        (-2.945243112740431f64, -0.19509032201612841f64),
        (-2.8961557275280905f64, -0.2429801799032645f64),
        (-2.84706834231575f64, -0.29028467725446244f64),
        (-2.7979809571034093f64, -0.33688985339222055f64),
        (-2.748893571891069f64, -0.3826834323650898f64),
        (-2.6998061866787286f64, -0.42755509343028164f64),
        (-2.650718801466388f64, -0.4713967368259976f64),
        (-2.6016314162540475f64, -0.5141027441932221f64),
        (-2.552544031041707f64, -0.5555702330196022f64),
        (-2.5034566458293663f64, -0.5956993044924336f64),
        (-2.454369260617026f64, -0.6343932841636454f64),
        (-2.405281875404685f64, -0.6715589548470187f64),
        (-2.356194490192345f64, -0.7071067811865475f64),
        (-2.3071071049800045f64, -0.7409511253549592f64),
        (-2.2580197197676637f64, -0.7730104533627368f64),
        (-2.2089323345553233f64, -0.803207531480645f64),
        (-2.1598449493429825f64, -0.8314696123025451f64),
        (-2.110757564130642f64, -0.8577286100002721f64),
        (-2.061670178918302f64, -0.8819212643483549f64),
        (-2.0125827937059615f64, -0.9039892931234434f64),
        (-1.9634954084936207f64, -0.9238795325112865f64),
        (-1.9144080232812801f64, -0.9415440651830208f64),
        (-1.8653206380689396f64, -0.9569403357322087f64),
        (-1.8162332528565992f64, -0.9700312531945439f64),
        (-1.7671458676442586f64, -0.9807852804032303f64),
        (-1.718058482431918f64, -0.9891765099647809f64),
        (-1.6689710972195777f64, -0.9951847266721968f64),
        (-1.6198837120072371f64, -0.9987954562051723f64),
        (-1.5707963267948966f64, -1f64),
        (-1.521708941582556f64, -0.9987954562051723f64),
        (-1.4726215563702154f64, -0.9951847266721968f64),
        (-1.423534171157875f64, -0.9891765099647809f64),
        (-1.3744467859455345f64, -0.9807852804032302f64),
        (-1.325359400733194f64, -0.9700312531945439f64),
        (-1.2762720155208536f64, -0.9569403357322088f64),
        (-1.227184630308513f64, -0.9415440651830207f64),
        (-1.1780972450961724f64, -0.9238795325112864f64),
        (-1.129009859883832f64, -0.9039892931234432f64),
        (-1.0799224746714913f64, -0.8819212643483547f64),
        (-1.030835089459151f64, -0.857728610000272f64),
        (-0.9817477042468106f64, -0.8314696123025452f64),
        (-0.9326603190344698f64, -0.8032075314806447f64),
        (-0.8835729338221294f64, -0.773010453362737f64),
        (-0.8344855486097886f64, -0.7409511253549589f64),
        (-0.7853981633974483f64, -0.7071067811865475f64),
        (-0.7363107781851079f64, -0.6715589548470183f64),
        (-0.6872233929727671f64, -0.6343932841636453f64),
        (-0.6381360077604268f64, -0.5956993044924334f64),
        (-0.589048622548086f64, -0.555570233019602f64),
        (-0.5399612373357456f64, -0.5141027441932216f64),
        (-0.4908738521234053f64, -0.4713967368259977f64),
        (-0.4417864669110645f64, -0.4275550934302819f64),
        (-0.39269908169872414f64, -0.3826834323650897f64),
        (-0.3436116964863838f64, -0.33688985339222016f64),
        (-0.294524311274043f64, -0.2902846772544622f64),
        (-0.24543692606170264f64, -0.24298017990326387f64),
        (-0.1963495408493623f64, -0.19509032201612847f64),
        (-0.1472621556370215f64, -0.1467304744553617f64),
        (-0.09817477042468115f64, -0.09801714032956071f64),
        (-0.04908738521234035f64, -0.04906767432741784f64),
        (0f64, 0f64),
        (0.04908738521234035f64, 0.04906767432741784f64),
        (0.09817477042468115f64, 0.09801714032956071f64),
        (0.1472621556370215f64, 0.1467304744553617f64),
        (0.1963495408493623f64, 0.19509032201612847f64),
        (0.24543692606170264f64, 0.24298017990326387f64),
        (0.294524311274043f64, 0.2902846772544622f64),
        (0.3436116964863838f64, 0.33688985339222016f64),
        (0.39269908169872414f64, 0.3826834323650897f64),
        (0.4417864669110645f64, 0.4275550934302819f64),
        (0.4908738521234053f64, 0.4713967368259977f64),
        (0.5399612373357456f64, 0.5141027441932216f64),
        (0.589048622548086f64, 0.555570233019602f64),
        (0.6381360077604268f64, 0.5956993044924334f64),
        (0.6872233929727671f64, 0.6343932841636453f64),
        (0.7363107781851079f64, 0.6715589548470183f64),
        (0.7853981633974483f64, 0.7071067811865475f64),
        (0.8344855486097886f64, 0.7409511253549589f64),
        (0.883572933822129f64, 0.7730104533627367f64),
        (0.9326603190344702f64, 0.803207531480645f64),
        (0.9817477042468106f64, 0.8314696123025452f64),
        (1.030835089459151f64, 0.857728610000272f64),
        (1.0799224746714913f64, 0.8819212643483547f64),
        (1.1290098598838316f64, 0.9039892931234432f64),
        (1.178097245096172f64, 0.9238795325112864f64),
        (1.2271846303085132f64, 0.9415440651830207f64),
        (1.2762720155208536f64, 0.9569403357322088f64),
        (1.325359400733194f64, 0.9700312531945439f64),
        (1.3744467859455343f64, 0.9807852804032302f64),
        (1.4235341711578746f64, 0.9891765099647809f64),
        (1.4726215563702159f64, 0.9951847266721968f64),
        (1.5217089415825562f64, 0.9987954562051723f64),
        (1.5707963267948966f64, 1f64),
        (1.619883712007237f64, 0.9987954562051723f64),
        (1.6689710972195773f64, 0.9951847266721968f64),
        (1.7180584824319185f64, 0.9891765099647809f64),
        (1.7671458676442588f64, 0.9807852804032303f64),
        (1.8162332528565992f64, 0.9700312531945439f64),
        (1.8653206380689396f64, 0.9569403357322087f64),
        (1.91440802328128f64, 0.9415440651830208f64),
        (1.9634954084936211f64, 0.9238795325112865f64),
        (2.0125827937059615f64, 0.9039892931234434f64),
        (2.061670178918302f64, 0.8819212643483549f64),
        (2.110757564130642f64, 0.8577286100002721f64),
        (2.1598449493429825f64, 0.8314696123025451f64),
        (2.208932334555323f64, 0.803207531480645f64),
        (2.258019719767664f64, 0.7730104533627368f64),
        (2.3071071049800045f64, 0.7409511253549592f64),
        (2.356194490192345f64, 0.7071067811865475f64),
        (2.405281875404685f64, 0.6715589548470187f64),
        (2.4543692606170255f64, 0.6343932841636454f64),
        (2.5034566458293668f64, 0.5956993044924328f64),
        (2.552544031041707f64, 0.5555702330196022f64),
        (2.6016314162540475f64, 0.5141027441932221f64),
        (2.650718801466388f64, 0.4713967368259976f64),
        (2.699806186678728f64, 0.4275550934302826f64),
        (2.7488935718910685f64, 0.3826834323650898f64),
        (2.7979809571034098f64, 0.33688985339221966f64),
        (2.84706834231575f64, 0.29028467725446244f64),
        (2.8961557275280905f64, 0.2429801799032645f64),
        (2.945243112740431f64, 0.19509032201612841f64),
        (2.994330497952771f64, 0.14673047445536241f64),
        (3.0434178831651124f64, 0.0980171403295608f64),
        (3.0925052683774528f64, 0.04906767432741773f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.sin();
        let y2 = sin_cos(x as f64).0 as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 0.0000000000000006661338147750939f64);
    const N: i32 = 0x100000;
    let tmin = -3.141592653589793f64;
    let tmax = 3.141592653589793f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.sin();
        let y2 = sin_cos(x as f64).0 as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 0.0000000000000006661338147750939f64);
}
#[test]
fn test_sin_cos_2() {
    let accurate_values: &[(f64, f64)] = &[
        (-3.0925052683774528f64, -0.9987954562051723f64),
        (-3.043417883165112f64, -0.9951847266721968f64),
        (-2.9943304979527716f64, -0.9891765099647809f64),
        (-2.945243112740431f64, -0.9807852804032303f64),
        (-2.8961557275280905f64, -0.9700312531945438f64),
        (-2.84706834231575f64, -0.9569403357322087f64),
        (-2.7979809571034093f64, -0.9415440651830205f64),
        (-2.748893571891069f64, -0.9238795325112867f64),
        (-2.6998061866787286f64, -0.9039892931234436f64),
        (-2.650718801466388f64, -0.8819212643483549f64),
        (-2.6016314162540475f64, -0.8577286100002718f64),
        (-2.552544031041707f64, -0.8314696123025451f64),
        (-2.5034566458293663f64, -0.8032075314806445f64),
        (-2.454369260617026f64, -0.773010453362737f64),
        (-2.405281875404685f64, -0.7409511253549588f64),
        (-2.356194490192345f64, -0.7071067811865475f64),
        (-2.3071071049800045f64, -0.6715589548470181f64),
        (-2.2580197197676637f64, -0.6343932841636456f64),
        (-2.2089323345553233f64, -0.5956993044924329f64),
        (-2.1598449493429825f64, -0.5555702330196023f64),
        (-2.110757564130642f64, -0.5141027441932214f64),
        (-2.061670178918302f64, -0.47139673682599775f64),
        (-2.0125827937059615f64, -0.4275550934302818f64),
        (-1.9634954084936207f64, -0.38268343236509f64),
        (-1.9144080232812801f64, -0.3368898533922198f64),
        (-1.8653206380689396f64, -0.2902846772544626f64),
        (-1.8162332528565992f64, -0.24298017990326365f64),
        (-1.7671458676442586f64, -0.19509032201612855f64),
        (-1.718058482431918f64, -0.14673047445536155f64),
        (-1.6689710972195777f64, -0.09801714032956094f64),
        (-1.6198837120072371f64, -0.049067674327417876f64),
        (
            -1.5707963267948966f64,
            -0.00000000000000038076899999999996f64,
        ),
        (-1.521708941582556f64, 0.049067674327418105f64),
        (-1.4726215563702154f64, 0.09801714032956117f64),
        (-1.423534171157875f64, 0.1467304744553618f64),
        (-1.3744467859455345f64, 0.19509032201612878f64),
        (-1.325359400733194f64, 0.24298017990326387f64),
        (-1.2762720155208536f64, 0.29028467725446183f64),
        (-1.227184630308513f64, 0.33688985339222005f64),
        (-1.1780972450961724f64, 0.38268343236509017f64),
        (-1.129009859883832f64, 0.427555093430282f64),
        (-1.0799224746714913f64, 0.47139673682599803f64),
        (-1.030835089459151f64, 0.5141027441932217f64),
        (-0.9817477042468106f64, 0.555570233019602f64),
        (-0.9326603190344698f64, 0.5956993044924334f64),
        (-0.8835729338221294f64, 0.6343932841636454f64),
        (-0.8344855486097886f64, 0.6715589548470184f64),
        (-0.7853981633974483f64, 0.7071067811865475f64),
        (-0.7363107781851079f64, 0.740951125354959f64),
        (-0.6872233929727671f64, 0.773010453362737f64),
        (-0.6381360077604268f64, 0.8032075314806447f64),
        (-0.589048622548086f64, 0.8314696123025452f64),
        (-0.5399612373357456f64, 0.857728610000272f64),
        (-0.4908738521234053f64, 0.8819212643483549f64),
        (-0.4417864669110645f64, 0.9039892931234432f64),
        (-0.39269908169872414f64, 0.9238795325112867f64),
        (-0.3436116964863838f64, 0.9415440651830206f64),
        (-0.294524311274043f64, 0.9569403357322088f64),
        (-0.24543692606170264f64, 0.9700312531945439f64),
        (-0.1963495408493623f64, 0.9807852804032303f64),
        (-0.1472621556370215f64, 0.9891765099647809f64),
        (-0.09817477042468115f64, 0.9951847266721968f64),
        (-0.04908738521234035f64, 0.9987954562051723f64),
        (0f64, 1f64),
        (0.04908738521234035f64, 0.9987954562051723f64),
        (0.09817477042468115f64, 0.9951847266721968f64),
        (0.1472621556370215f64, 0.9891765099647809f64),
        (0.1963495408493623f64, 0.9807852804032303f64),
        (0.24543692606170264f64, 0.9700312531945439f64),
        (0.294524311274043f64, 0.9569403357322088f64),
        (0.3436116964863838f64, 0.9415440651830206f64),
        (0.39269908169872414f64, 0.9238795325112867f64),
        (0.4417864669110645f64, 0.9039892931234432f64),
        (0.4908738521234053f64, 0.8819212643483549f64),
        (0.5399612373357456f64, 0.857728610000272f64),
        (0.589048622548086f64, 0.8314696123025452f64),
        (0.6381360077604268f64, 0.8032075314806447f64),
        (0.6872233929727671f64, 0.773010453362737f64),
        (0.7363107781851079f64, 0.740951125354959f64),
        (0.7853981633974483f64, 0.7071067811865475f64),
        (0.8344855486097886f64, 0.6715589548470184f64),
        (0.883572933822129f64, 0.6343932841636457f64),
        (0.9326603190344702f64, 0.5956993044924329f64),
        (0.9817477042468106f64, 0.555570233019602f64),
        (1.030835089459151f64, 0.5141027441932217f64),
        (1.0799224746714913f64, 0.47139673682599803f64),
        (1.1290098598838316f64, 0.427555093430282f64),
        (1.178097245096172f64, 0.38268343236509017f64),
        (1.2271846303085132f64, 0.33688985339222005f64),
        (1.2762720155208536f64, 0.29028467725446183f64),
        (1.325359400733194f64, 0.24298017990326387f64),
        (1.3744467859455343f64, 0.19509032201612878f64),
        (1.4235341711578746f64, 0.1467304744553618f64),
        (1.4726215563702159f64, 0.09801714032956017f64),
        (1.5217089415825562f64, 0.049067674327418105f64),
        (
            1.5707963267948966f64,
            -0.00000000000000038076899999999996f64,
        ),
        (1.619883712007237f64, -0.049067674327417876f64),
        (1.6689710972195773f64, -0.09801714032955994f64),
        (1.7180584824319185f64, -0.14673047445536155f64),
        (1.7671458676442588f64, -0.19509032201612855f64),
        (1.8162332528565992f64, -0.24298017990326365f64),
        (1.8653206380689396f64, -0.2902846772544626f64),
        (1.91440802328128f64, -0.3368898533922198f64),
        (1.9634954084936211f64, -0.38268343236509f64),
        (2.0125827937059615f64, -0.4275550934302818f64),
        (2.061670178918302f64, -0.47139673682599775f64),
        (2.110757564130642f64, -0.5141027441932214f64),
        (2.1598449493429825f64, -0.5555702330196023f64),
        (2.208932334555323f64, -0.5956993044924329f64),
        (2.258019719767664f64, -0.6343932841636456f64),
        (2.3071071049800045f64, -0.6715589548470181f64),
        (2.356194490192345f64, -0.7071067811865475f64),
        (2.405281875404685f64, -0.7409511253549588f64),
        (2.4543692606170255f64, -0.773010453362737f64),
        (2.5034566458293668f64, -0.803207531480645f64),
        (2.552544031041707f64, -0.8314696123025451f64),
        (2.6016314162540475f64, -0.8577286100002718f64),
        (2.650718801466388f64, -0.8819212643483549f64),
        (2.699806186678728f64, -0.903989293123443f64),
        (2.7488935718910685f64, -0.9238795325112867f64),
        (2.7979809571034098f64, -0.9415440651830208f64),
        (2.84706834231575f64, -0.9569403357322087f64),
        (2.8961557275280905f64, -0.9700312531945438f64),
        (2.945243112740431f64, -0.9807852804032303f64),
        (2.994330497952771f64, -0.9891765099647808f64),
        (3.0434178831651124f64, -0.9951847266721968f64),
        (3.0925052683774528f64, -0.9987954562051723f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.cos();
        let y2 = sin_cos(x as f64).1 as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 0.0000000000000008881784197001252f64);
    const N: i32 = 0x100000;
    let tmin = -3.141592653589793f64;
    let tmax = 3.141592653589793f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.cos();
        let y2 = sin_cos(x as f64).1 as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 0.0000000000000008881784197001252f64);
}
#[test]
fn test_asin() {
    let accurate_values: &[(f64, f64)] = &[
        (-0.97453125f64, -0.07163330732334915f64),
        (-0.9590625f64, -0.11471085042477279f64),
        (-0.94359375f64, -0.15742635434871388f64),
        (-0.928125f64, -0.19974977498393298f64),
        (-0.91265625f64, -0.2416516833410382f64),
        (-0.8971875f64, -0.2831033638963263f64),
        (-0.88171875f64, -0.3240769100535947f64),
        (-0.86625f64, -0.36454531607511553f64),
        (-0.85078125f64, -0.40448256486334333f64),
        (-0.8353125f64, -0.4438637110113703f64),
        (-0.81984375f64, -0.48266495858207903f64),
        (-0.8043750000000001f64, -0.5208637331226679f64),
        (-0.78890625f64, -0.558438747472065f64),
        (-0.7734375f64, -0.5953700609729818f64),
        (-0.75796875f64, -0.6316391317573112f64),
        (-0.7424999999999999f64, -0.6672288618325345f64),
        (-0.72703125f64, -0.7021236347571594f64),
        (-0.7115625f64, -0.7363093457543242f64),
        (-0.69609375f64, -0.7697734241739921f64),
        (-0.680625f64, -0.8025048482751307f64),
        (-0.66515625f64, -0.8344941523593519f64),
        (-0.6496875f64, -0.8657334263462699f64),
        (-0.63421875f64, -0.896216307937833f64),
        (-0.61875f64, -0.9259379675736774f64),
        (-0.60328125f64, -0.9548950864317234f64),
        (-0.5878125000000001f64, -0.9830858277773916f64),
        (-0.5723437499999999f64, -1.0105098020105219f64),
        (-0.556875f64, -1.037168025800988f64),
        (-0.54140625f64, -1.0630628757417127f64),
        (-0.5259375f64, -1.0881980369809143f64),
        (-0.51046875f64, -1.1125784473236917f64),
        (-0.495f64, -0.5178348316323792f64),
        (-0.47953124999999996f64, -0.5001204614575385f64),
        (-0.46406250000000004f64, -0.4825759550635557f64),
        (-0.44859375f64, -0.46519126497295715f64),
        (-0.433125f64, -0.4479569842223604f64),
        (-0.41765624999999995f64, -0.430864282693705f64),
        (-0.40218750000000003f64, -0.4139048509131493f64),
        (-0.38671875f64, -0.39707085025135624f64),
        (-0.37124999999999997f64, -0.3803548686324861f64),
        (-0.35578125000000005f64, -0.36374988100086364f64),
        (-0.3403125f64, -0.34724921391049024f64),
        (-0.32484375f64, -0.33084651369836254f64),
        (-0.30937499999999996f64, -0.31453571778190736f64),
        (-0.29390625000000004f64, -0.29831102868684467f64),
        (-0.2784375f64, -0.28216689046692806f64),
        (-0.26296875f64, -0.26609796722324747f64),
        (-0.24750000000000005f64, -0.25009912346968777f64),
        (-0.23203125000000002f64, -0.23416540612398487f64),
        (-0.2165625f64, -0.2182920279316423f64),
        (-0.20109374999999996f64, -0.20247435215358356f64),
        (-0.18562500000000004f64, -0.18670787836851796f64),
        (-0.17015625f64, -0.1709882292581244f64),
        (-0.15468749999999998f64, -0.15531113825778312f64),
        (-0.13921874999999995f64, -0.1396724379680727f64),
        (-0.12375000000000003f64, -0.12406804923291767f64),
        (-0.10828125f64, -0.10849397079936626f64),
        (-0.09281249999999996f64, -0.09294626948172834f64),
        (-0.07734375000000004f64, -0.07742107075935903f64),
        (-0.06187500000000001f64, -0.06191454974290632f64),
        (-0.04640624999999998f64, -0.04642292244845195f64),
        (-0.03093749999999995f64, -0.030942437322763004f64),
        (-0.015468750000000031f64, -0.015469366965925735f64),
        (0f64, 0f64),
        (0.01546874999999992f64, 0.015469366965925624f64),
        (0.030937500000000062f64, 0.030942437322763115f64),
        (0.04640624999999998f64, 0.04642292244845195f64),
        (0.0618749999999999f64, 0.061914549742906215f64),
        (0.07734375000000004f64, 0.07742107075935903f64),
        (0.09281249999999996f64, 0.09294626948172834f64),
        (0.1082812500000001f64, 0.10849397079936636f64),
        (0.12375000000000003f64, 0.12406804923291767f64),
        (0.13921874999999995f64, 0.1396724379680727f64),
        (0.1546875000000001f64, 0.1553111382577832f64),
        (0.17015625f64, 0.1709882292581244f64),
        (0.18562499999999993f64, 0.18670787836851788f64),
        (0.20109375000000007f64, 0.20247435215358367f64),
        (0.2165625f64, 0.2182920279316423f64),
        (0.2320312499999999f64, 0.23416540612398473f64),
        (0.24750000000000005f64, 0.25009912346968777f64),
        (0.26296875f64, 0.26609796722324747f64),
        (0.2784374999999999f64, 0.28216689046692794f64),
        (0.29390625000000004f64, 0.29831102868684467f64),
        (0.30937499999999996f64, 0.31453571778190736f64),
        (0.3248437500000001f64, 0.33084651369836265f64),
        (0.3403125f64, 0.34724921391049024f64),
        (0.35578124999999994f64, 0.3637498810008636f64),
        (0.3712500000000001f64, 0.38035486863248613f64),
        (0.38671875f64, 0.39707085025135624f64),
        (0.4021874999999999f64, 0.4139048509131492f64),
        (0.41765625000000006f64, 0.43086428269370514f64),
        (0.433125f64, 0.4479569842223604f64),
        (0.4485937499999999f64, 0.46519126497295704f64),
        (0.46406250000000004f64, 0.4825759550635557f64),
        (0.47953124999999996f64, 0.5001204614575385f64),
        (0.4949999999999999f64, 0.5178348316323791f64),
        (0.51046875f64, 1.6755399122555705f64),
        (0.5259375f64, 1.6766726826384526f64),
        (0.5414062500000001f64, 1.67773897724488f64),
        (0.556875f64, 1.6787417460174279f64),
        (0.5723437499999999f64, 1.679683808291377f64),
        (0.5878125000000001f64, 1.6805678584873658f64),
        (0.60328125f64, 1.681396471584877f64),
        (0.6187499999999999f64, 1.6821721083809469f64),
        (0.63421875f64, 1.6828971205389238f64),
        (0.6496875f64, 1.6835737554324834f64),
        (0.6651562499999999f64, 1.684204160790397f64),
        (0.680625f64, 1.6847903891477682f64),
        (0.69609375f64, 1.6853344021096233f64),
        (0.7115625000000001f64, 1.685838074432843f64),
        (0.72703125f64, 1.6863031979324852f64),
        (0.7424999999999999f64, 1.6867314852185822f64),
        (0.7579687500000001f64, 1.6871245732694626f64),
        (0.7734375f64, 1.6874840268476314f64),
        (0.7889062499999999f64, 1.6878113417641458f64),
        (0.8043750000000001f64, 1.688107947997364f64),
        (0.81984375f64, 1.688375212671811f64),
        (0.8353124999999999f64, 1.6886144429028047f64),
        (0.85078125f64, 1.6888268885123334f64),
        (0.86625f64, 1.689013744621551f64),
        (0.8817187499999999f64, 1.6891761541250874f64),
        (0.8971875f64, 1.6893152100522295f64),
        (0.91265625f64, 1.6894319578198607f64),
        (0.9281250000000001f64, 1.6895273973818838f64),
        (0.94359375f64, 1.6896024852796965f64),
        (0.9590624999999999f64, 1.689658136598112f64),
        (0.9745312500000001f64, 1.6896952268309688f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.asin();
        let y2 = asin(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 40532396646334460f64);
    const N: i32 = 0x100000;
    let tmin = -0.99f64;
    let tmax = 0.99f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.asin();
        let y2 = asin(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 40532396646334460f64);
}
#[test]
fn test_acos() {
    let accurate_values: &[(f64, f64)] = &[
        (-0.97453125f64, 1.6424296341182456f64),
        (-0.9590625f64, 1.6855071772196693f64),
        (-0.94359375f64, 1.7282226811436103f64),
        (-0.928125f64, 1.7705461017788293f64),
        (-0.91265625f64, 1.8124480101359346f64),
        (-0.8971875f64, 1.8538996906912226f64),
        (-0.88171875f64, 1.8948732368484913f64),
        (-0.86625f64, 1.935341642870012f64),
        (-0.85078125f64, 1.97527889165824f64),
        (-0.8353125f64, 2.0146600378062667f64),
        (-0.81984375f64, 2.0534612853769754f64),
        (-0.8043750000000001f64, 2.0916600599175643f64),
        (-0.78890625f64, 2.1292350742669615f64),
        (-0.7734375f64, 2.1661663877678783f64),
        (-0.75796875f64, 2.2024354585522077f64),
        (-0.7424999999999999f64, 2.238025188627431f64),
        (-0.72703125f64, 2.272919961552056f64),
        (-0.7115625f64, 2.3071056725492207f64),
        (-0.69609375f64, 2.3405697509688888f64),
        (-0.680625f64, 2.3733011750700275f64),
        (-0.66515625f64, 2.405290479154248f64),
        (-0.6496875f64, 2.436529753141166f64),
        (-0.63421875f64, 2.4670126347327295f64),
        (-0.61875f64, 2.496734294368574f64),
        (-0.60328125f64, 2.52569141322662f64),
        (-0.5878125000000001f64, 2.553882154572288f64),
        (-0.5723437499999999f64, 2.5813061288054184f64),
        (-0.556875f64, 2.6079643525958844f64),
        (-0.54140625f64, 2.633859202536609f64),
        (-0.5259375f64, 2.6589943637758107f64),
        (-0.51046875f64, 2.6833747741185885f64),
        (-0.495f64, 2.0886311584272756f64),
        (-0.47953124999999996f64, 2.0709167882524353f64),
        (-0.46406250000000004f64, 2.053372281858452f64),
        (-0.44859375f64, 2.035987591767854f64),
        (-0.433125f64, 2.0187533110172566f64),
        (-0.41765624999999995f64, 2.0016606094886016f64),
        (-0.40218750000000003f64, 1.9847011777080457f64),
        (-0.38671875f64, 1.9678671770462528f64),
        (-0.37124999999999997f64, 1.9511511954273826f64),
        (-0.35578125000000005f64, 1.9345462077957603f64),
        (-0.3403125f64, 1.9180455407053867f64),
        (-0.32484375f64, 1.901642840493259f64),
        (-0.30937499999999996f64, 1.8853320445768038f64),
        (-0.29390625000000004f64, 1.8691073554817412f64),
        (-0.2784375f64, 1.8529632172618244f64),
        (-0.26296875f64, 1.8368942940181439f64),
        (-0.24750000000000005f64, 1.8208954502645842f64),
        (-0.23203125000000002f64, 1.8049617329188814f64),
        (-0.2165625f64, 1.7890883547265388f64),
        (-0.20109374999999996f64, 1.7732706789484802f64),
        (-0.18562500000000004f64, 1.7575042051634144f64),
        (-0.17015625f64, 1.741784556053021f64),
        (-0.15468749999999998f64, 1.7261074650526798f64),
        (-0.13921874999999995f64, 1.710468764762969f64),
        (-0.12375000000000003f64, 1.6948643760278141f64),
        (-0.10828125f64, 1.6792902975942627f64),
        (-0.09281249999999996f64, 1.663742596276625f64),
        (-0.07734375000000004f64, 1.6482173975542556f64),
        (-0.06187500000000001f64, 1.632710876537803f64),
        (-0.04640624999999998f64, 1.6172192492433484f64),
        (-0.03093749999999995f64, 1.6017387641176595f64),
        (-0.015468750000000031f64, 1.5862656937608222f64),
        (0f64, 1.5707963267948966f64),
        (0.01546874999999992f64, 1.555326959828971f64),
        (0.030937500000000062f64, 1.5398538894721334f64),
        (0.04640624999999998f64, 1.5243734043464445f64),
        (0.0618749999999999f64, 1.5088817770519904f64),
        (0.07734375000000004f64, 1.4933752560355376f64),
        (0.09281249999999996f64, 1.4778500573131683f64),
        (0.1082812500000001f64, 1.4623023559955302f64),
        (0.12375000000000003f64, 1.4467282775619787f64),
        (0.13921874999999995f64, 1.4311238888268238f64),
        (0.1546875000000001f64, 1.4154851885371131f64),
        (0.17015625f64, 1.399808097536772f64),
        (0.18562499999999993f64, 1.3840884484263787f64),
        (0.20109375000000007f64, 1.3683219746413129f64),
        (0.2165625f64, 1.352504298863254f64),
        (0.2320312499999999f64, 1.3366309206709117f64),
        (0.24750000000000005f64, 1.3206972033252087f64),
        (0.26296875f64, 1.304698359571649f64),
        (0.2784374999999999f64, 1.2886294363279684f64),
        (0.29390625000000004f64, 1.2724852981080519f64),
        (0.30937499999999996f64, 1.256260609012989f64),
        (0.3248437500000001f64, 1.2399498130965338f64),
        (0.3403125f64, 1.2235471128844062f64),
        (0.35578124999999994f64, 1.207046445794033f64),
        (0.3712500000000001f64, 1.1904414581624103f64),
        (0.38671875f64, 1.1737254765435403f64),
        (0.4021874999999999f64, 1.1568914758817475f64),
        (0.41765625000000006f64, 1.1399320441011913f64),
        (0.433125f64, 1.122839342572536f64),
        (0.4485937499999999f64, 1.1056050618219395f64),
        (0.46406250000000004f64, 1.0882203717313408f64),
        (0.47953124999999996f64, 1.070675865337358f64),
        (0.4949999999999999f64, 1.0529614951625175f64),
        (0.51046875f64, -0.10474358546067404f64),
        (0.5259375f64, -0.10587635584355616f64),
        (0.5414062500000001f64, -0.10694265044998376f64),
        (0.556875f64, -0.10794541922253133f64),
        (0.5723437499999999f64, -0.10888748149648059f64),
        (0.5878125000000001f64, -0.10977153169246923f64),
        (0.60328125f64, -0.11060014478998047f64),
        (0.6187499999999999f64, -0.11137578158605037f64),
        (0.63421875f64, -0.11210079374402725f64),
        (0.6496875f64, -0.11277742863758695f64),
        (0.6651562499999999f64, -0.11340783399550045f64),
        (0.680625f64, -0.11399406235287167f64),
        (0.69609375f64, -0.11453807531472698f64),
        (0.7115625000000001f64, -0.11504174763794645f64),
        (0.72703125f64, -0.1155068711375888f64),
        (0.7424999999999999f64, -0.11593515842368557f64),
        (0.7579687500000001f64, -0.11632824647456631f64),
        (0.7734375f64, -0.11668770005273495f64),
        (0.7889062499999999f64, -0.11701501496924939f64),
        (0.8043750000000001f64, -0.11731162120246746f64),
        (0.81984375f64, -0.11757888587691467f64),
        (0.8353124999999999f64, -0.11781811610790822f64),
        (0.85078125f64, -0.11803056171743698f64),
        (0.86625f64, -0.11821741782665449f64),
        (0.8817187499999999f64, -0.11837982733019084f64),
        (0.8971875f64, -0.11851888325733305f64),
        (0.91265625f64, -0.11863563102496413f64),
        (0.9281250000000001f64, -0.11873107058698736f64),
        (0.94359375f64, -0.11880615848479993f64),
        (0.9590624999999999f64, -0.11886180980321555f64),
        (0.9745312500000001f64, -0.11889890003607259f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.acos();
        let y2 = acos(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 40532396646334460f64);
    const N: i32 = 0x100000;
    let tmin = -0.99f64;
    let tmax = 0.99f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.acos();
        let y2 = acos(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 40532396646334460f64);
}
#[test]
fn test_atan() {
    let accurate_values: &[(f64, f64)] = &[
        (-1.96875f64, -0.6043209052806167f64),
        (-1.9375f64, -0.609286664647476f64),
        (-1.90625f64, -0.6143148769372192f64),
        (-1.875f64, -0.6194058890849123f64),
        (-1.84375f64, -0.6245599896578736f64),
        (-1.8125f64, -0.6297774023414192f64),
        (-1.78125f64, -0.6350582788759221f64),
        (-1.75f64, -0.6404026914054556f64),
        (-1.71875f64, -0.6458106241963348f64),
        (-1.6875f64, -0.6512819646820183f64),
        (-1.65625f64, -0.6568164937891303f64),
        (-1.625f64, -0.6624138754978882f64),
        (-1.59375f64, -0.6680736455890501f64),
        (-1.5625f64, -0.6737951995287383f64),
        (-1.53125f64, -0.6795777794422553f64),
        (-1.5f64, -0.6854204601284443f64),
        (-1.46875f64, -0.6913221340674159f64),
        (-1.4375f64, -0.697281495376772f64),
        (-1.40625f64, -0.7032970226750269f64),
        (-1.375f64, -0.7093669608160406f64),
        (-1.34375f64, -0.7154893014652288f64),
        (-1.3125f64, -0.7216617624974676f64),
        (-1.28125f64, -0.7278817662083562f64),
        (-1.25f64, -0.7341464163453018f64),
        (-1.21875f64, -0.740452473983217f64),
        (-1.1875f64, -0.7467963322920532f64),
        (-1.15625f64, -0.7531739902704757f64),
        (-1.125f64, -0.7595810255523765f64),
        (-1.09375f64, -0.7660125664312125f64),
        (-1.0625f64, -0.7724632632920131f64),
        (-1.03125f64, -0.7789272596928795f64),
        (-1f64, -0.7853981633974483f64),
        (-0.96875f64, -0.7918690177274479f64),
        (-0.9375f64, -0.7983322736803542f64),
        (-0.90625f64, -0.8047797633410984f64),
        (-0.875f64, -0.8112026752083096f64),
        (-0.84375f64, -0.817591532153625f64),
        (-0.8125f64, -0.8239361728354947f64),
        (-0.78125f64, -0.8302257374941466f64),
        (-0.75f64, -0.8364486591584581f64),
        (-0.71875f64, -0.8425926613938534f64),
        (-0.6875f64, -0.8486447638071616f64),
        (-0.65625f64, -0.8545912965924998f64),
        (-0.625f64, -0.8604179254432451f64),
        (-0.59375f64, -0.866109688159397f64),
        (-0.5625f64, -0.8716510442365524f64),
        (-0.53125f64, -0.8770259386213229f64),
        (-0.5f64, -0.4636476090008061f64),
        (-0.46875f64, -0.4383365598579578f64),
        (-0.4375f64, -0.4124104415973873f64),
        (-0.40625f64, -0.38588266939807375f64),
        (-0.375f64, -0.3587706702705722f64),
        (-0.34375f64, -0.33109607670413205f64),
        (-0.3125f64, -0.30288486837497136f64),
        (-0.28125f64, -0.2741674511196588f64),
        (-0.25f64, -0.24497866312686414f64),
        (-0.21875f64, -0.21535769969773805f64),
        (-0.1875f64, -0.18534794999569473f64),
        (-0.15625f64, -0.15499674192394097f64),
        (-0.125f64, -0.12435499454676142f64),
        (-0.09375f64, -0.09347678115858946f64),
        (-0.0625f64, -0.06241880999595734f64),
        (-0.03125f64, -0.031239833430268274f64),
        (0f64, 0f64),
        (0.03125f64, 0.031239833430268274f64),
        (0.0625f64, 0.06241880999595734f64),
        (0.09375f64, 0.09347678115858946f64),
        (0.125f64, 0.12435499454676142f64),
        (0.15625f64, 0.15499674192394097f64),
        (0.1875f64, 0.18534794999569473f64),
        (0.21875f64, 0.21535769969773805f64),
        (0.25f64, 0.24497866312686414f64),
        (0.28125f64, 0.2741674511196588f64),
        (0.3125f64, 0.30288486837497136f64),
        (0.34375f64, 0.33109607670413205f64),
        (0.375f64, 0.3587706702705722f64),
        (0.40625f64, 0.38588266939807375f64),
        (0.4375f64, 0.4124104415973873f64),
        (0.46875f64, 0.4383365598579578f64),
        (0.5f64, 0.4636476090008061f64),
        (0.53125f64, 0.8770259386213229f64),
        (0.5625f64, 0.8716510442365524f64),
        (0.59375f64, 0.866109688159397f64),
        (0.625f64, 0.8604179254432451f64),
        (0.65625f64, 0.8545912965924998f64),
        (0.6875f64, 0.8486447638071616f64),
        (0.71875f64, 0.8425926613938534f64),
        (0.75f64, 0.8364486591584581f64),
        (0.78125f64, 0.8302257374941466f64),
        (0.8125f64, 0.8239361728354947f64),
        (0.84375f64, 0.817591532153625f64),
        (0.875f64, 0.8112026752083096f64),
        (0.90625f64, 0.8047797633410984f64),
        (0.9375f64, 0.7983322736803542f64),
        (0.96875f64, 0.7918690177274479f64),
        (1f64, 0.7853981633974483f64),
        (1.03125f64, 0.7789272596928795f64),
        (1.0625f64, 0.7724632632920131f64),
        (1.09375f64, 0.7660125664312125f64),
        (1.125f64, 0.7595810255523765f64),
        (1.15625f64, 0.7531739902704757f64),
        (1.1875f64, 0.7467963322920532f64),
        (1.21875f64, 0.740452473983217f64),
        (1.25f64, 0.7341464163453018f64),
        (1.28125f64, 0.7278817662083562f64),
        (1.3125f64, 0.7216617624974676f64),
        (1.34375f64, 0.7154893014652288f64),
        (1.375f64, 0.7093669608160406f64),
        (1.40625f64, 0.7032970226750269f64),
        (1.4375f64, 0.697281495376772f64),
        (1.46875f64, 0.6913221340674159f64),
        (1.5f64, 0.6854204601284443f64),
        (1.53125f64, 0.6795777794422553f64),
        (1.5625f64, 0.6737951995287383f64),
        (1.59375f64, 0.6680736455890501f64),
        (1.625f64, 0.6624138754978882f64),
        (1.65625f64, 0.6568164937891303f64),
        (1.6875f64, 0.6512819646820183f64),
        (1.71875f64, 0.6458106241963348f64),
        (1.75f64, 0.6404026914054556f64),
        (1.78125f64, 0.6350582788759221f64),
        (1.8125f64, 0.6297774023414192f64),
        (1.84375f64, 0.6245599896578736f64),
        (1.875f64, 0.6194058890849123f64),
        (1.90625f64, 0.6143148769372192f64),
        (1.9375f64, 0.609286664647476f64),
        (1.96875f64, 0.6043209052806167f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.atan();
        let y2 = atan(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = -2f64;
    let tmax = 2f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.atan();
        let y2 = atan(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_atan2_a() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.atan2(1.0);
        let y2 = atan2(x as f64, 1.0) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.atan2(1.0);
        let y2 = atan2(x as f64, 1.0) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_atan2_b() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.atan2(-1.0);
        let y2 = atan2(x as f64, -1.0) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.atan2(-1.0);
        let y2 = atan2(x as f64, -1.0) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_atan2_c() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = (1.0_f64).atan2(x);
        let y2 = atan2(1.0, x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = (1.0_f64).atan2(x);
        let y2 = atan2(1.0, x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_atan2_d() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = (-1.0_f64).atan2(x);
        let y2 = atan2(-1.0, x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = (-1.0_f64).atan2(x);
        let y2 = atan2(-1.0, x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_exp_a() {
    let accurate_values: &[(f64, f64)] = &[
        (0.0078125f64, 1.0078430972064478f64),
        (0.015625f64, 1.0157477085866857f64),
        (0.0234375f64, 1.023714316602358f64),
        (0.03125f64, 1.0317434074991025f64),
        (0.0390625f64, 1.0398354713362299f64),
        (0.046875f64, 1.0479910020166325f64),
        (0.0546875f64, 1.056210497316932f64),
        (0.0625f64, 1.0644944589178593f64),
        (0.0703125f64, 1.0728433924348775f64),
        (0.078125f64, 1.0812578074490395f64),
        (0.0859375f64, 1.0897382175380932f64),
        (0.09375f64, 1.0982851403078258f64),
        (0.1015625f64, 1.1068990974236574f64),
        (0.109375f64, 1.1155806146424807f64),
        (0.1171875f64, 1.1243302218447506f64),
        (0.125f64, 1.1331484530668263f64),
        (0.1328125f64, 1.1420358465335656f64),
        (0.140625f64, 1.1509929446911762f64),
        (0.1484375f64, 1.160020294240325f64),
        (0.15625f64, 1.1691184461695043f64),
        (0.1640625f64, 1.1782879557886632f64),
        (0.171875f64, 1.1875293827631006f64),
        (0.1796875f64, 1.1968432911476246f64),
        (0.1875f64, 1.2062302494209807f64),
        (0.1953125f64, 1.2156908305205474f64),
        (0.203125f64, 1.2252256118773075f64),
        (0.2109375f64, 1.234835175451091f64),
        (0.21875f64, 1.2445201077660952f64),
        (0.2265625f64, 1.2542809999466835f64),
        (0.234375f64, 1.2641184477534664f64),
        (0.2421875f64, 1.2740330516196607f64),
        (0.25f64, 1.2840254166877414f64),
        (0.2578125f64, 1.294096152846373f64),
        (0.265625f64, 1.3042458747676378f64),
        (0.2734375f64, 1.314475201944549f64),
        (0.28125f64, 1.3247847587288655f64),
        (0.2890625f64, 1.3351751743691969f64),
        (0.296875f64, 1.3456470830494105f64),
        (0.3046875f64, 1.3562011239273402f64),
        (0.3125f64, 1.3668379411737963f64),
        (0.3203125f64, 1.3775581840118836f64),
        (0.328125f64, 1.3883625067566268f64),
        (0.3359375f64, 1.3992515688549068f64),
        (0.34375f64, 1.4102260349257107f64),
        (0.3515625f64, 1.4212865748006966f64),
        (0.359375f64, 1.432433863565078f64),
        (0.3671875f64, 1.4436685815988268f64),
        (0.375f64, 1.454991414618201f64),
        (0.3828125f64, 1.466403053717599f64),
        (0.390625f64, 1.4779041954117382f64),
        (0.3984375f64, 1.4894955416781699f64),
        (0.40625f64, 1.5011778000001226f64),
        (0.4140625f64, 1.5129516834096854f64),
        (0.421875f64, 1.5248179105313266f64),
        (0.4296875f64, 1.5367772056257567f64),
        (0.4375f64, 1.5488302986341331f64),
        (0.4453125f64, 1.5609779252226124f64),
        (0.453125f64, 1.573220826827253f64),
        (0.4609375f64, 1.5855597506992671f64),
        (0.46875f64, 1.5979954499506333f64),
        (0.4765625f64, 1.6105286836000576f64),
        (0.484375f64, 1.6231602166193055f64),
        (0.4921875f64, 1.6358908199798896f64),
        (0.5f64, 1.648721270700128f64),
        (0.5078125f64, 1.6616523518925674f64),
        (0.515625f64, 1.674684852811784f64),
        (0.5234375f64, 1.6878195689025528f64),
        (0.53125f64, 1.7010573018484005f64),
        (0.5390625f64, 1.7143988596205355f64),
        (0.546875f64, 1.727845056527163f64),
        (0.5546875f64, 1.7413967132631862f64),
        (0.5625f64, 1.7550546569602983f64),
        (0.5703125f64, 1.7688197212374672f64),
        (0.578125f64, 1.782692746251815f64),
        (0.5859375f64, 1.7966745787498977f64),
        (0.59375f64, 1.810766072119387f64),
        (0.6015625f64, 1.8249680864411573f64),
        (0.609375f64, 1.8392814885417805f64),
        (0.6171875f64, 1.853707152046434f64),
        (0.625f64, 1.8682459574322223f64),
        (0.6328125f64, 1.8828987920819165f64),
        (0.640625f64, 1.8976665503381185f64),
        (0.6484375f64, 1.9125501335578452f64),
        (0.65625f64, 1.9275504501675444f64),
        (0.6640625f64, 1.942668415718541f64),
        (0.671875f64, 1.957904952942918f64),
        (0.6796875f64, 1.9732609918098352f64),
        (0.6875f64, 1.9887374695822915f64),
        (0.6953125f64, 2.004335330874331f64),
        (0.703125f64, 2.0200555277086965f64),
        (0.7109375f64, 2.0358990195749382f64),
        (0.71875f64, 2.0518667734879767f64),
        (0.7265625f64, 2.0679597640471234f64),
        (0.734375f64, 2.0841789734955682f64),
        (0.7421875f64, 2.1005253917803293f64),
        (0.75f64, 2.117000016612675f64),
        (0.7578125f64, 2.13360385352902f64),
        (0.765625f64, 2.1503379159522997f64),
        (0.7734375f64, 2.1672032252538247f64),
        (0.78125f64, 2.184200810815618f64),
        (0.7890625f64, 2.201331710093247f64),
        (0.796875f64, 2.2185969686791447f64),
        (0.8046875f64, 2.2359976403664263f64),
        (0.8125f64, 2.2535347872132085f64),
        (0.8203125f64, 2.2712094796074336f64),
        (0.828125f64, 2.2890227963322007f64),
        (0.8359375f64, 2.3069758246316097f64),
        (0.84375f64, 2.3250696602771206f64),
        (0.8515625f64, 2.3433054076344373f64),
        (0.859375f64, 2.3616841797309096f64),
        (0.8671875f64, 2.3802070983234693f64),
        (0.875f64, 2.3988752939670976f64),
        (0.8828125f64, 2.4176899060838277f64),
        (0.890625f64, 2.4366520830322917f64),
        (0.8984375f64, 2.455762982177808f64),
        (0.90625f64, 2.475023769963025f64),
        (0.9140625f64, 2.4944356219791146f64),
        (0.921875f64, 2.5139997230375233f64),
        (0.9296875f64, 2.5337172672422894f64),
        (0.9375f64, 2.5535894580629264f64),
        (0.9453125f64, 2.5736175084078754f64),
        (0.953125f64, 2.5938026406985344f64),
        (0.9609375f64, 2.614146086943874f64),
        (0.96875f64, 2.634649088815631f64),
        (0.9765625f64, 2.6553128977240914f64),
        (0.984375f64, 2.6761387748944765f64),
        (0.9921875f64, 2.6971279914439186f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.exp();
        let y2 = exp(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = 0f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.exp();
        let y2 = exp(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_exp_b() {
    let accurate_values: &[(f64, f64)] = &[
        (1.0078125f64, 2.73960157707417f64),
        (1.015625f64, 2.7610885385501014f64),
        (1.0234375f64, 2.7827440243535593f64),
        (1.03125f64, 2.8045693562372263f64),
        (1.0390625f64, 2.8265658663204203f64),
        (1.046875f64, 2.848734897170399f64),
        (1.0546875f64, 2.871077801884307f64),
        (1.0625f64, 2.8935959441717607f64),
        (1.0703125f64, 2.9162906984380834f64),
        (1.078125f64, 2.9391634498681936f64),
        (1.0859375f64, 2.962215594511149f64),
        (1.09375f64, 2.985448539365356f64),
        (1.1015625f64, 3.0088637024644465f64),
        (1.109375f64, 3.032462512963828f64),
        (1.1171875f64, 3.0562464112279124f64),
        (1.125f64, 3.080216848918031f64),
        (1.1328125f64, 3.104375289081034f64),
        (1.140625f64, 3.128723206238592f64),
        (1.1484375f64, 3.1532620864771905f64),
        (1.15625f64, 3.177993427538838f64),
        (1.1640625f64, 3.2029187389124782f64),
        (1.171875f64, 3.2280395419261225f64),
        (1.1796875f64, 3.2533573698397067f64),
        (1.1875f64, 3.2788737679386735f64),
        (1.1953125f64, 3.304590293628289f64),
        (1.203125f64, 3.3305085165287f64),
        (1.2109375f64, 3.3566300185707374f64),
        (1.21875f64, 3.382956394092469f64),
        (1.2265625f64, 3.409489249936511f64),
        (1.234375f64, 3.436230205548102f64),
        (1.2421875f64, 3.463180893073949f64),
        (1.25f64, 3.490342957461841f64),
        (1.2578125f64, 3.5177180565610553f64),
        (1.265625f64, 3.545307861223541f64),
        (1.2734375f64, 3.5731140554059015f64),
        (1.28125f64, 3.601138336272175f64),
        (1.2890625f64, 3.6293824142974245f64),
        (1.296875f64, 3.6578480133721323f64),
        (1.3046875f64, 3.686536870907422f64),
        (1.3125f64, 3.7154507379411035f64),
        (1.3203125f64, 3.744591379244545f64),
        (1.328125f64, 3.7739605734303865f64),
        (1.3359375f64, 3.803560113061103f64),
        (1.34375f64, 3.83339180475841f64),
        (1.3515625f64, 3.863457469313531f64),
        (1.359375f64, 3.8937589417983345f64),
        (1.3671875f64, 3.9242980716773355f64),
        (1.375f64, 3.9550767229205768f64),
        (1.3828125f64, 3.9860967741174025f64),
        (1.390625f64, 4.017360118591114f64),
        (1.3984375f64, 4.048868664514531f64),
        (1.40625f64, 4.08062433502646f64),
        (1.4140625f64, 4.11262906834907f64),
        (1.421875f64, 4.1448848179061955f64),
        (1.4296875f64, 4.177393552442564f64),
        (1.4375f64, 4.21015725614396f64),
        (1.4453125f64, 4.243177928758329f64),
        (1.453125f64, 4.276457585717836f64),
        (1.4609375f64, 4.3099982582618726f64),
        (1.46875f64, 4.343801993561042f64),
        (1.4765625f64, 4.3778708548421035f64),
        (1.484375f64, 4.4122069215139055f64),
        (1.4921875f64, 4.446812289294302f64),
        (1.5f64, 4.4816890703380645f64),
        (1.5078125f64, 4.516839393365801f64),
        (1.515625f64, 4.552265403793883f64),
        (1.5234375f64, 4.587969263865388f64),
        (1.53125f64, 4.62395315278208f64),
        (1.5390625f64, 4.660219266837411f64),
        (1.546875f64, 4.696769819550579f64),
        (1.5546875f64, 4.733607041801625f64),
        (1.5625f64, 4.770733181967602f64),
        (1.5703125f64, 4.808150506059801f64),
        (1.578125f64, 4.84586129786206f64),
        (1.5859375f64, 4.883867859070157f64),
        (1.59375f64, 4.92217250943229f64),
        (1.6015625f64, 4.960777586890675f64),
        (1.609375f64, 4.999685447724226f64),
        (1.6171875f64, 5.03889846669239f64),
        (1.625f64, 5.078419037180081f64),
        (1.6328125f64, 5.11824957134376f64),
        (1.640625f64, 5.158392500258669f64),
        (1.6484375f64, 5.198850274067211f64),
        (1.65625f64, 5.239625362128488f64),
        (1.6640625f64, 5.280720253169033f64),
        (1.671875f64, 5.322137455434696f64),
        (1.6796875f64, 5.363879496843748f64),
        (1.6875f64, 5.405948925141166f64),
        (1.6953125f64, 5.4483483080541415f64),
        (1.703125f64, 5.4910802334487965f64),
        (1.7109375f64, 5.534147309488141f64),
        (1.71875f64, 5.577552164791259f64),
        (1.7265625f64, 5.621297448593751f64),
        (1.734375f64, 5.66538583090943f64),
        (1.7421875f64, 5.709820002693285f64),
        (1.75f64, 5.75460267600573f64),
        (1.7578125f64, 5.799736584178129f64),
        (1.765625f64, 5.84522448197963f64),
        (1.7734375f64, 5.8910691457853055f64),
        (1.78125f64, 5.937273373745606f64),
        (1.7890625f64, 5.9838399859571485f64),
        (1.796875f64, 6.03077182463484f64),
        (1.8046875f64, 6.07807175428536f64),
        (1.8125f64, 6.1257426618819855f64),
        (1.8203125f64, 6.173787457040811f64),
        (1.828125f64, 6.222209072198331f64),
        (1.8359375f64, 6.271010462790425f64),
        (1.84375f64, 6.320194607432743f64),
        (1.8515625f64, 6.369764508102507f64),
        (1.859375f64, 6.419723190321736f64),
        (1.8671875f64, 6.470073703341918f64),
        (1.875f64, 6.5208191203301125f64),
        (1.8828125f64, 6.571962538556526f64),
        (1.890625f64, 6.623507079583559f64),
        (1.8984375f64, 6.675455889456329f64),
        (1.90625f64, 6.727812138894691f64),
        (1.9140625f64, 6.780579023486762f64),
        (1.921875f64, 6.833759763883971f64),
        (1.9296875f64, 6.887357605997627f64),
        (1.9375f64, 6.941375821197035f64),
        (1.9453125f64, 6.995817706509171f64),
        (1.953125f64, 7.050686584819912f64),
        (1.9609375f64, 7.105985805076854f64),
        (1.96875f64, 7.1617187424937105f64),
        (1.9765625f64, 7.217888798756329f64),
        (1.984375f64, 7.274499402230307f64),
        (1.9921875f64, 7.331554008170246f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.exp();
        let y2 = exp(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 45035996273704960f64);
    const N: i32 = 0x100000;
    let tmin = 1f64;
    let tmax = 2f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.exp();
        let y2 = exp(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 45035996273704960f64);
}
#[test]
fn test_exp_m1() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.exp_m1();
        let y2 = exp_m1(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = 0f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.exp_m1();
        let y2 = exp_m1(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_exp2() {
    let accurate_values: &[(f64, f64)] = &[
        (0.0078125f64, 1.0054299011128027f64),
        (0.015625f64, 1.0108892860517003f64),
        (0.0234375f64, 1.0163783149109529f64),
        (0.03125f64, 1.0218971486541166f64),
        (0.0390625f64, 1.0274459491187637f64),
        (0.046875f64, 1.0330248790212284f64),
        (0.0546875f64, 1.0386341019613787f64),
        (0.0625f64, 1.0442737824274138f64),
        (0.0703125f64, 1.0499440858006872f64),
        (0.078125f64, 1.0556451783605572f64),
        (0.0859375f64, 1.0613772272892619f64),
        (0.09375f64, 1.0671404006768237f64),
        (0.1015625f64, 1.0729348675259753f64),
        (0.109375f64, 1.0787607977571196f64),
        (0.1171875f64, 1.0846183622133092f64),
        (0.125f64, 1.0905077326652577f64),
        (0.1328125f64, 1.0964290818163767f64),
        (0.140625f64, 1.102382583307841f64),
        (0.1484375f64, 1.1083684117236787f64),
        (0.15625f64, 1.1143867425958924f64),
        (0.1640625f64, 1.1204377524096065f64),
        (0.171875f64, 1.1265216186082418f64),
        (0.1796875f64, 1.132638519598719f64),
        (0.1875f64, 1.1387886347566916f64),
        (0.1953125f64, 1.1449721444318042f64),
        (0.203125f64, 1.1511892299529827f64),
        (0.2109375f64, 1.157440073633751f64),
        (0.21875f64, 1.1637248587775773f64),
        (0.2265625f64, 1.1700437696832502f64),
        (0.234375f64, 1.1763969916502812f64),
        (0.2421875f64, 1.182784710984341f64),
        (0.25f64, 1.189207115002721f64),
        (0.2578125f64, 1.1956643920398273f64),
        (0.265625f64, 1.202156731452703f64),
        (0.2734375f64, 1.2086843236265814f64),
        (0.28125f64, 1.215247359980469f64),
        (0.2890625f64, 1.2218460329727574f64),
        (0.296875f64, 1.2284805361068698f64),
        (0.3046875f64, 1.2351510639369332f64),
        (0.3125f64, 1.241857812073484f64),
        (0.3203125f64, 1.2486009771892046f64),
        (0.328125f64, 1.255380757024691f64),
        (0.3359375f64, 1.2621973503942505f64),
        (0.34375f64, 1.2690509571917332f64),
        (0.3515625f64, 1.275941778396392f64),
        (0.359375f64, 1.282870016078778f64),
        (0.3671875f64, 1.2898358734066657f64),
        (0.375f64, 1.2968395546510094f64),
        (0.3828125f64, 1.3038812651919356f64),
        (0.390625f64, 1.3109612115247642f64),
        (0.3984375f64, 1.318079601266064f64),
        (0.40625f64, 1.325236643159741f64),
        (0.4140625f64, 1.3324325470831613f64),
        (0.421875f64, 1.339667524053303f64),
        (0.4296875f64, 1.3469417862329458f64),
        (0.4375f64, 1.3542555469368927f64),
        (0.4453125f64, 1.3616090206382245f64),
        (0.453125f64, 1.3690024229745905f64),
        (0.4609375f64, 1.37643597075453f64),
        (0.46875f64, 1.3839098819638318f64),
        (0.4765625f64, 1.391424375771926f64),
        (0.484375f64, 1.398979672538311f64),
        (0.4921875f64, 1.4065759938190152f64),
        (0.5f64, 1.414213562373095f64),
        (0.5078125f64, 1.4218926021691656f64),
        (0.515625f64, 1.42961333839197f64),
        (0.5234375f64, 1.4373759974489821f64),
        (0.53125f64, 1.4451808069770467f64),
        (0.5390625f64, 1.4530279958490526f64),
        (0.546875f64, 1.460917794180647f64),
        (0.5546875f64, 1.4688504333369816f64),
        (0.5625f64, 1.4768261459394991f64),
        (0.5703125f64, 1.4848451658727524f64),
        (0.578125f64, 1.4929077282912646f64),
        (0.5859375f64, 1.5010140696264254f64),
        (0.59375f64, 1.5091644275934226f64),
        (0.6015625f64, 1.5173590411982145f64),
        (0.609375f64, 1.5255981507445382f64),
        (0.6171875f64, 1.533881997840956f64),
        (0.625f64, 1.5422108254079407f64),
        (0.6328125f64, 1.5505848776849998f64),
        (0.640625f64, 1.559004400237837f64),
        (0.6484375f64, 1.5674696399655528f64),
        (0.65625f64, 1.5759808451078863f64),
        (0.6640625f64, 1.5845382652524937f64),
        (0.671875f64, 1.5931421513422666f64),
        (0.6796875f64, 1.6017927556826932f64),
        (0.6875f64, 1.610490331949254f64),
        (0.6953125f64, 1.6192351351948635f64),
        (0.703125f64, 1.6280274218573476f64),
        (0.7109375f64, 1.6368674497669642f64),
        (0.71875f64, 1.6457554781539647f64),
        (0.7265625f64, 1.6546917676561943f64),
        (0.734375f64, 1.6636765803267362f64),
        (0.7421875f64, 1.6727101796415966f64),
        (0.75f64, 1.681792830507429f64),
        (0.7578125f64, 1.6909247992693048f64),
        (0.765625f64, 1.7001063537185235f64),
        (0.7734375f64, 1.7093377631004627f64),
        (0.78125f64, 1.718619298122478f64),
        (0.7890625f64, 1.7279512309618374f64),
        (0.796875f64, 1.737333835273706f64),
        (0.8046875f64, 1.7467673861991688f64),
        (0.8125f64, 1.7562521603732995f64),
        (0.8203125f64, 1.7657884359332725f64),
        (0.828125f64, 1.7753764925265212f64),
        (0.8359375f64, 1.785016611318935f64),
        (0.84375f64, 1.794709075003107f64),
        (0.8515625f64, 1.8044541678066237f64),
        (0.859375f64, 1.8142521755003986f64),
        (0.8671875f64, 1.8241033854070532f64),
        (0.875f64, 1.8340080864093422f64),
        (0.8828125f64, 1.8439665689586258f64),
        (0.890625f64, 1.8539791250833855f64),
        (0.8984375f64, 1.8640460483977888f64),
        (0.90625f64, 1.8741676341103f64),
        (0.9140625f64, 1.8843441790323343f64),
        (0.921875f64, 1.8945759815869654f64),
        (0.9296875f64, 1.9048633418176741f64),
        (0.9375f64, 1.915206561397147f64),
        (0.9453125f64, 1.9256059436361248f64),
        (0.953125f64, 1.9360617934922943f64),
        (0.9609375f64, 1.946574417579233f64),
        (0.96875f64, 1.9571441241754002f64),
        (0.9765625f64, 1.9677712232331757f64),
        (0.984375f64, 1.978456026387951f64),
        (0.9921875f64, 1.9891988469672661f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.exp2();
        let y2 = exp2(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.exp2();
        let y2 = exp2(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_ln() {
    let accurate_values: &[(f64, f64)] = &[
        (1.0134240767848364f64, 0.013334772199426947f64),
        (1.0268481535696725f64, 0.026494065652348922f64),
        (1.0402722303545089f64, 0.03948243885637987f64),
        (1.0536963071393453f64, 0.05230427495681157f64),
        (1.0671203839241814f64, 0.06496379062660172f64),
        (1.0805444607090178f64, 0.07746504439127505f64),
        (1.0939685374938541f64, 0.08981194443985153f64),
        (1.1073926142786903f64, 0.10200825595943033f64),
        (1.1208166910635267f64, 0.11405760802785306f64),
        (1.1342407678483628f64, 0.1259635000960253f64),
        (1.1476648446331992f64, 0.13772930808887474f64),
        (1.1610889214180355f64, 0.14935829015154062f64),
        (1.1745129982028717f64, 0.16085359206527394f64),
        (1.187937074987708f64, 0.17221825235557847f64),
        (1.2013611517725444f64, 0.18345520711332822f64),
        (1.2147852285573806f64, 0.19456729454801203f64),
        (1.228209305342217f64, 0.20555725929076044f64),
        (1.2416333821270533f64, 0.2164277564634883f64),
        (1.2550574589118895f64, 0.2271813555292292f64),
        (1.2684815356967258f64, 0.23782054393764204f64),
        (1.281905612481562f64, 0.24834773057861947f64),
        (1.2953296892663984f64, 0.2587652490560055f64),
        (1.3087537660512347f64, 0.26907536079253613f64),
        (1.322177842836071f64, 0.2792802579763456f64),
        (1.3356019196209072f64, 0.28938206635864683f64),
        (1.3490259964057436f64, 0.299382847911505f64),
        (1.3624500731905798f64, 0.30928460335402197f64),
        (1.3758741499754161f64, 0.31908927455468006f64),
        (1.3892982267602525f64, 0.3287987468170468f64),
        (1.4027223035450886f64, 0.3384148510555816f64),
        (1.416146380329925f64, 0.3479393658678164f64),
        (1.4295704571147612f64, 0.3573740195087883f64),
        (1.4429945338995975f64, 0.36672049177319266f64),
        (1.456418610684434f64, 0.3759804157903897f64),
        (1.4698426874692703f64, 0.385155379737069f64),
        (1.4832667642541064f64, 0.3942469284720504f64),
        (1.4966908410389428f64, 0.4032565650974415f64),
        (1.510114917823779f64, 0.4121857524500899f64),
        (1.5235389946086153f64, 0.42103591452704114f64),
        (1.5369630713934517f64, 0.4298084378484652f64),
        (1.550387148178288f64, 0.4385046727613184f64),
        (1.5638112249631242f64, 0.44712593468681455f64),
        (1.5772353017479603f64, 0.4556735053145727f64),
        (1.5906593785327967f64, 0.46414863374616466f64),
        (1.604083455317633f64, 0.4725525375906064f64),
        (1.6175075321024694f64, 0.4808864040142056f64),
        (1.6309316088873056f64, 0.4891513907470174f64),
        (1.644355685672142f64, 0.49734862704804816f64),
        (1.6577797624569781f64, 0.5054792146312258f64),
        (1.6712038392418145f64, 0.5135442285540223f64),
        (1.6846279160266509f64, 0.5215447180705325f64),
        (1.6980519928114872f64, 0.5294817074506941f64),
        (1.7114760695963234f64, 0.5373561967672571f64),
        (1.7249001463811595f64, 0.5451691626520055f64),
        (1.7383242231659959f64, 0.5529215590226647f64),
        (1.7517482999508323f64, 0.560614317781854f64),
        (1.7651723767356686f64, 0.5682483494893548f64),
        (1.7785964535205048f64, 0.5758245440089109f64),
        (1.7920205303053411f64, 0.5833437711307173f64),
        (1.8054446070901773f64, 0.5908068811706729f64),
        (1.8188686838750137f64, 0.5982147055474418f64),
        (1.83229276065985f64, 0.6055680573382928f64),
        (1.8457168374446864f64, 0.6128677318146575f64),
        (1.8591409142295225f64, 0.6201145069582776f64),
        (1.8725649910143587f64, 0.6273091439587841f64),
        (1.885989067799195f64, 0.6344523876935089f64),
        (1.8994131445840314f64, 0.6415449671902764f64),
        (1.9128372213688678f64, 0.6485875960739004f64),
        (1.926261298153704f64, 0.6555809729970659f64),
        (1.9396853749385403f64, 0.6625257820562526f64),
        (1.9531094517233765f64, 0.669422693193311f64),
        (1.9665335285082128f64, 0.6762723625832885f64),
        (1.9799576052930492f64, 0.6830754330090579f64),
        (1.9933816820778856f64, 0.6898325342232973f64),
        (2.006805758862722f64, 0.6965442832983111f64),
        (2.020229835647558f64, 0.703211284964201f64),
        (2.0336539124323942f64, 0.7098341319358292f64),
        (2.0470779892172306f64, 0.7164134052290314f64),
        (2.060502066002067f64, 0.7229496744664904f64),
        (2.0739261427869033f64, 0.7294434981736841f64),
        (2.0873502195717393f64, 0.7358954240652813f64),
        (2.100774296356576f64, 0.7423059893223592f64),
        (2.114198373141412f64, 0.7486757208607909f64),
        (2.1276224499262484f64, 0.7550051355911419f64),
        (2.1410465267110848f64, 0.7612947406703899f64),
        (2.1544706034959207f64, 0.7675450337457783f64),
        (2.1678946802807575f64, 0.7737565031910989f64),
        (2.1813187570655934f64, 0.7799296283356789f64),
        (2.19474283385043f64, 0.7860648796863434f64),
        (2.208166910635266f64, 0.7921627191426103f64),
        (2.221590987420102f64, 0.7982236002053666f64),
        (2.235015064204939f64, 0.8042479681792555f64),
        (2.248439140989775f64, 0.8102362603690031f64),
        (2.261863217774611f64, 0.8161889062699063f64),
        (2.2752872945594476f64, 0.8221063277526803f64),
        (2.288711371344284f64, 0.8279889392428696f64),
        (2.3021354481291203f64, 0.8338371478950157f64),
        (2.3155595249139562f64, 0.8396513537617578f64),
        (2.3289836016987926f64, 0.8454319499580489f64),
        (2.342407678483629f64, 0.8511793228206493f64),
        (2.3558317552684653f64, 0.8568938520630676f64),
        (2.3692558320533017f64, 0.8625759109260964f64),
        (2.3826799088381376f64, 0.8682258663240943f64),
        (2.3961039856229744f64, 0.8738440789871629f64),
        (2.4095280624078104f64, 0.8794309035993484f64),
        (2.4229521391926467f64, 0.8849866889330062f64),
        (2.436376215977483f64, 0.8905117779794507f64),
        (2.449800292762319f64, 0.8960065080760203f64),
        (2.463224369547156f64, 0.9014712110296667f64),
        (2.4766484463319918f64, 0.9069062132371852f64),
        (2.490072523116828f64, 0.9123118358021999f64),
        (2.5034965999016645f64, 0.9176883946489992f64),
        (2.5169206766865004f64, 0.923036200633328f64),
        (2.5303447534713372f64, 0.9283555596502385f64),
        (2.543768830256173f64, 0.9336467727390785f64),
        (2.5571929070410095f64, 0.9389101361857252f64),
        (2.570616983825846f64, 0.9441459416221369f64),
        (2.5840410606106823f64, 0.9493544761233167f64),
        (2.5974651373955187f64, 0.9545360223017597f64),
        (2.6108892141803546f64, 0.9596908583994674f64),
        (2.6243132909651914f64, 0.9648192583776056f64),
        (2.6377373677500273f64, 0.9699214920038702f64),
        (2.6511614445348637f64, 0.9749978249376386f64),
        (2.6645855213197f64, 0.9800485188129691f64),
        (2.678009598104536f64, 0.9850738313195169f64),
        (2.691433674889373f64, 0.9900740162814249f64),
        (2.7048577516742087f64, 0.995049323734252f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.ln();
        let y2 = ln(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 1f64;
    let tmax = 2.718281828459045f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.ln();
        let y2 = ln(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_ln_1p_a() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.ln_1p();
        let y2 = ln_1p(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.ln_1p();
        let y2 = ln_1p(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_ln_1p_b() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.ln_1p();
        let y2 = ln_1p(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = 1f64;
    let tmax = 7.154845485377136f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.ln_1p();
        let y2 = ln_1p(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_log2() {
    let accurate_values: &[(f64, f64)] = &[
        (0.28125f64, -1.8300749985576874f64),
        (0.3125f64, -1.6780719051126374f64),
        (0.34375f64, -1.5405683813627025f64),
        (0.375f64, -1.4150374992788435f64),
        (0.40625f64, -1.2995602818589074f64),
        (0.4375f64, -1.1926450779423956f64),
        (0.46875f64, -1.0931094043914813f64),
        (0.5f64, -0.9999999999999998f64),
        (0.53125f64, -0.9125371587496603f64),
        (0.5625f64, -0.8300749985576874f64),
        (0.59375f64, -0.7520724865564143f64),
        (0.625f64, -0.6780719051126375f64),
        (0.65625f64, -0.6076825772212395f64),
        (0.6875f64, -0.5405683813627027f64),
        (0.71875f64, -0.476438043942987f64),
        (0.75f64, -0.4150374992788437f64),
        (0.78125f64, -0.3561438102252752f64),
        (0.8125f64, -0.29956028185890776f64),
        (0.84375f64, -0.24511249783653138f64),
        (0.875f64, -0.19264507794239585f64),
        (0.90625f64, -0.14201900487242786f64),
        (0.9375f64, -0.09310940439148145f64),
        (0.96875f64, -0.04580368961312478f64),
        (1f64, 0f64),
        (1.03125f64, 0.04439411935845343f64),
        (1.0625f64, 0.08746284125033939f64),
        (1.09375f64, 0.12928301694496644f64),
        (1.125f64, 0.16992500144231232f64),
        (1.15625f64, 0.20945336562894976f64),
        (1.1875f64, 0.24792751344358543f64),
        (1.21875f64, 0.2854022188622483f64),
        (1.25f64, 0.32192809488736224f64),
        (1.28125f64, 0.3575520046180836f64),
        (1.3125f64, 0.3923174227787602f64),
        (1.34375f64, 0.42626475470209785f64),
        (1.375f64, 0.45943161863729715f64),
        (1.40625f64, 0.49185309632967456f64),
        (1.4375f64, 0.5235619560570128f64),
        (1.46875f64, 0.5545888516776373f64),
        (1.5f64, 0.5849625007211561f64),
        (1.53125f64, 0.614709844115208f64),
        (1.5625f64, 0.6438561897747245f64),
        (1.59375f64, 0.6724253419714955f64),
        (1.625f64, 0.700439718141092f64),
        (1.65625f64, 0.727920454563199f64),
        (1.6875f64, 0.7548875021634683f64),
        (1.71875f64, 0.7813597135246594f64),
        (1.75f64, 0.807354922057604f64),
        (1.78125f64, 0.8328900141647415f64),
        (1.8125f64, 0.857980995127572f64),
        (1.84375f64, 0.882643049361841f64),
        (1.875f64, 0.9068905956085184f64),
        (1.90625f64, 0.930737337562886f64),
        (1.9375f64, 0.9541963103868749f64),
        (1.96875f64, 0.9772799234999163f64),
        (2f64, 1f64),
        (2.03125f64, 1.0223678130284544f64),
        (2.0625f64, 1.0443941193584534f64),
        (2.09375f64, 1.0660891904577723f64),
        (2.125f64, 1.087462841250339f64),
        (2.15625f64, 1.1085244567781687f64),
        (2.1875f64, 1.1292830169449664f64),
        (2.21875f64, 1.149747119504682f64),
        (2.25f64, 1.1699250014423122f64),
        (2.28125f64, 1.1898245588800171f64),
        (2.3125f64, 1.2094533656289495f64),
        (2.34375f64, 1.2288186904958807f64),
        (2.375f64, 1.2479275134435852f64),
        (2.40625f64, 1.2667865406949013f64),
        (2.4375f64, 1.2854022188622483f64),
        (2.46875f64, 1.3037807481771027f64),
        (2.5f64, 1.3219280948873622f64),
        (2.53125f64, 1.3398500028846243f64),
        (2.5625f64, 1.3575520046180836f64),
        (2.59375f64, 1.3750394313469245f64),
        (2.625f64, 1.39231742277876f64),
        (2.65625f64, 1.4093909361377015f64),
        (2.6875f64, 1.4262647547020977f64),
        (2.71875f64, 1.4429434958487282f64),
        (2.75f64, 1.459431618637297f64),
        (2.78125f64, 1.4757334309663974f64),
        (2.8125f64, 1.4918530963296743f64),
        (2.84375f64, 1.507794640198696f64),
        (2.875f64, 1.5235619560570126f64),
        (2.90625f64, 1.539158811108031f64),
        (2.9375f64, 1.5545888516776372f64),
        (2.96875f64, 1.5698556083309476f64),
        (3f64, 1.5849625007211559f64),
        (3.03125f64, 1.5999128421871274f64),
        (3.0625f64, 1.614709844115208f64),
        (3.09375f64, 1.6293566200796092f64),
        (3.125f64, 1.6438561897747244f64),
        (3.15625f64, 1.6582114827517944f64),
        (3.1875f64, 1.6724253419714954f64),
        (3.21875f64, 1.686500527183218f64),
        (3.25f64, 1.700439718141092f64),
        (3.28125f64, 1.7142455176661224f64),
        (3.3125f64, 1.727920454563199f64),
        (3.34375f64, 1.7414669864011467f64),
        (3.375f64, 1.7548875021634682f64),
        (3.40625f64, 1.7681843247769262f64),
        (3.4375f64, 1.7813597135246593f64),
        (3.46875f64, 1.7944158663501057f64),
        (3.5f64, 1.8073549220576037f64),
        (3.53125f64, 1.8201789624151874f64),
        (3.5625f64, 1.8328900141647413f64),
        (3.59375f64, 1.8454900509443748f64),
        (3.625f64, 1.8579809951275719f64),
        (3.65625f64, 1.8703647195834043f64),
        (3.6875f64, 1.882643049361841f64),
        (3.71875f64, 1.8948177633079433f64),
        (3.75f64, 1.9068905956085183f64),
        (3.78125f64, 1.9188632372745942f64),
        (3.8125f64, 1.930737337562886f64),
        (3.84375f64, 1.9425145053392396f64),
        (3.875f64, 1.954196310386875f64),
        (3.90625f64, 1.9657842846620868f64),
        (3.9375f64, 1.977279923499916f64),
        (3.96875f64, 1.9886846867721655f64),
        (4f64, 1.9999999999999996f64),
        (4.03125f64, 2.011227255423254f64),
        (4.0625f64, 2.0223678130284544f64),
        (4.09375f64, 2.0334230015374497f64),
        (4.125f64, 2.044394119358453f64),
        (4.15625f64, 2.0552824355011894f64),
        (4.1875f64, 2.066089190457772f64),
        (4.21875f64, 2.0768155970508304f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.log2();
        let y2 = log2(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0.25f64;
    let tmax = 4.25f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.log2();
        let y2 = log2(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_log10() {
    let accurate_values: &[(f64, f64)] = &[
        (0.178125f64, -0.7492751226474144f64),
        (0.25625f64, -0.5913361259361892f64),
        (0.334375f64, -0.4757662006346962f64),
        (0.4125f64, -0.384576047114056f64),
        (0.490625f64, -0.30925032591067214f64),
        (0.56875f64, -0.24507859033483115f64),
        (0.646875f64, -0.18917963286298817f64),
        (0.725f64, -0.13966199342900626f64),
        (0.803125f64, -0.09521685498861142f64),
        (0.88125f64, -0.05490087000054486f64),
        (0.959375f64, -0.018011602842719486f64),
        (1.0375f64, 0.015988105384130313f64),
        (1.115625f64, 0.047518237792287206f64),
        (1.19375f64, 0.07691338459180273f64),
        (1.271875f64, 0.10444443090531404f64),
        (1.35f64, 0.1303337684950061f64),
        (1.428125f64, 0.1547662217499442f64),
        (1.50625f64, 0.17789705991894356f64),
        (1.584375f64, 0.19985798101342997f64),
        (1.6625f64, 0.22076165397514214f64),
        (1.740625f64, 0.2407052168538229f64),
        (1.81875f64, 0.25977300632998246f64),
        (1.896875f64, 0.2780387127553516f64),
        (1.975f64, 0.295567099962479f64),
        (2.053125f64, 0.3124153912398747f64),
        (2.13125f64, 0.3286343963365729f64),
        (2.209375f64, 0.34426943547699335f64),
        (2.2875f64, 0.35936110273848576f64),
        (2.365625f64, 0.3739459011801667f64),
        (2.44375f64, 0.38805677473994193f64),
        (2.521875f64, 0.40172355640216434f64),
        (2.6f64, 0.41497334797081786f64),
        (2.678125f64, 0.4278308436032921f64),
        (2.75625f64, 0.44031860681191365f64),
        (2.834375f64, 0.4524573087401892f64),
        (2.9125f64, 0.4642659340340753f64),
        (2.990625f64, 0.4757619594569375f64),
        (3.06875f64, 0.48696150946704353f64),
        (3.146875f64, 0.4978794922337119f64),
        (3.225f64, 0.5085297189712864f64),
        (3.303125f64, 0.5189250089875201f64),
        (3.38125f64, 0.5290772824506446f64),
        (3.459375f64, 0.5389976425588168f64),
        (3.5375f64, 0.5486964485323464f64),
        (3.615625f64, 0.5581833806318435f64),
        (3.69375f64, 0.5674674982253304f64),
        (3.771875f64, 0.5765572917774431f64),
        (3.85f64, 0.5854607295085006f64),
        (3.928125f64, 0.5941852993660516f64),
        (4.00625f64, 0.6027380468628925f64),
        (4.084375f64, 0.6111256092606382f64),
        (4.1625f64, 0.6193542465143761f64),
        (4.240625f64, 0.627429869339831f64),
        (4.31875f64, 0.6353580647182735f64),
        (4.396875f64, 0.6431441191148395f64),
        (4.475f64, 0.6507930396519306f64),
        (4.553125f64, 0.658309573450084f64),
        (4.63125f64, 0.6656982253234032f64),
        (4.709375f64, 0.6729632739947257f64),
        (4.7875f64, 0.680108786976679f64),
        (4.865625f64, 0.6871386342482141f64),
        (4.94375f64, 0.6940565008417515f64),
        (5.021875f64, 0.7008658984434384f64),
        (5.1f64, 0.7075701760979362f64),
        (5.178125f64, 0.7141725300994306f64),
        (5.25625f64, 0.7206760131419871f64),
        (5.334375f64, 0.7270835427948275f64),
        (5.4125f64, 0.7333979093614217f64),
        (5.490625f64, 0.7396217831753888f64),
        (5.56875f64, 0.7457577213809499f64),
        (5.646875f64, 0.7518081742410256f64),
        (5.725f64, 0.7577754910119254f64),
        (5.803125f64, 0.7636619254198742f64),
        (5.88125f64, 0.769469640771332f64),
        (5.959375f64, 0.7752007147260994f64),
        (6.0375f64, 0.7808571437595684f64),
        (6.115625f64, 0.786440847338095f64),
        (6.19375f64, 0.7919536718293503f64),
        (6.271875f64, 0.7973973941675794f64),
        (6.35f64, 0.8027737252919755f64),
        (6.428125f64, 0.8080843133748178f64),
        (6.50625f64, 0.8133307468546112f64),
        (6.584375f64, 0.818514557288194f64),
        (6.6625f64, 0.8236372220346285f64),
        (6.740625f64, 0.8287001667826388f64),
        (6.81875f64, 0.8337047679324169f64),
        (6.896875f64, 0.8386523548417489f64),
        (6.975f64, 0.843544211945635f64),
        (7.053125f64, 0.8483815807578559f64),
        (7.13125f64, 0.8531656617622897f64),
        (7.209375f64, 0.8578976162011873f64),
        (7.2875f64, 0.8625785677670703f64),
        (7.365625f64, 0.8672096042044176f64),
        (7.44375f64, 0.8717917788268525f64),
        (7.521875f64, 0.8763261119551238f64),
        (7.6f64, 0.8808135922807913f64),
        (7.678125f64, 0.8852551781601748f64),
        (7.75625f64, 0.8896517988428048f64),
        (7.834375f64, 0.8940043556383103f64),
        (7.9125f64, 0.8983137230254113f64),
        (7.990625f64, 0.9025807497064292f64),
        (8.06875f64, 0.9068062596104953f64),
        (8.146875f64, 0.9109910528484227f64),
        (8.225f64, 0.9151359066220117f64),
        (8.303125f64, 0.9192415760903714f64),
        (8.38125f64, 0.9233087951956739f64),
        (8.459375f64, 0.9273382774506003f64),
        (8.5375f64, 0.9313307166895887f64),
        (8.615625f64, 0.9352867877858675f64),
        (8.69375f64, 0.9392071473361214f64),
        (8.771875f64, 0.943092434314533f64),
        (8.85f64, 0.9469432706978251f64),
        (8.928125f64, 0.9507602620628368f64),
        (9.00625f64, 0.9545439981580642f64),
        (9.084375f64, 0.9582950534505216f64),
        (9.1625f64, 0.9620139876491842f64),
        (9.240625f64, 0.9657013462062114f64),
        (9.31875f64, 0.9693576607970696f64),
        (9.396875f64, 0.9729834497806114f64),
        (9.475f64, 0.9765792186401098f64),
        (9.553125f64, 0.9801454604061827f64),
        (9.63125f64, 0.9836826560624944f64),
        (9.709375f64, 0.9871912749350682f64),
        (9.7875f64, 0.9906717750659995f64),
        (9.865625f64, 0.9941246035723111f64),
        (9.94375f64, 0.9975501969906564f64),
        (10.021875f64, 1.0009489816085344f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.log10();
        let y2 = log10(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0.1f64;
    let tmax = 10.1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.log10();
        let y2 = log10(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_log_2() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, -0.9776321869715453f64),
        (0.515625f64, -0.9556058806415463f64),
        (0.5234375f64, -0.9339108095422273f64),
        (0.53125f64, -0.9125371587496603f64),
        (0.5390625f64, -0.8914755432218308f64),
        (0.546875f64, -0.8707169830550333f64),
        (0.5546875f64, -0.8502528804953178f64),
        (0.5625f64, -0.8300749985576874f64),
        (0.5703125f64, -0.8101754411199826f64),
        (0.578125f64, -0.79054663437105f64),
        (0.5859375f64, -0.771181309504119f64),
        (0.59375f64, -0.7520724865564143f64),
        (0.6015625f64, -0.7332134593050985f64),
        (0.609375f64, -0.7145977811377515f64),
        (0.6171875f64, -0.6962192518228969f64),
        (0.625f64, -0.6780719051126375f64),
        (0.6328125f64, -0.6601499971153751f64),
        (0.640625f64, -0.6424479953819162f64),
        (0.6484375f64, -0.624960568653075f64),
        (0.65625f64, -0.6076825772212395f64),
        (0.6640625f64, -0.5906090638622981f64),
        (0.671875f64, -0.5737352452979019f64),
        (0.6796875f64, -0.5570565041512715f64),
        (0.6875f64, -0.5405683813627027f64),
        (0.6953125f64, -0.5242665690336021f64),
        (0.703125f64, -0.5081469036703252f64),
        (0.7109375f64, -0.49220535980130364f64),
        (0.71875f64, -0.476438043942987f64),
        (0.7265625f64, -0.4608411888919685f64),
        (0.734375f64, -0.4454111483223625f64),
        (0.7421875f64, -0.43014439166905205f64),
        (0.75f64, -0.4150374992788437f64),
        (0.7578125f64, -0.40008715781287224f64),
        (0.765625f64, -0.3852901558847917f64),
        (0.7734375f64, -0.37064337992039026f64),
        (0.78125f64, -0.3561438102252752f64),
        (0.7890625f64, -0.3417885172482052f64),
        (0.796875f64, -0.32757465802850433f64),
        (0.8046875f64, -0.31349947281678153f64),
        (0.8125f64, -0.29956028185890776f64),
        (0.8203125f64, -0.2857544823338773f64),
        (0.828125f64, -0.27207954543680074f64),
        (0.8359375f64, -0.258533013598853f64),
        (0.84375f64, -0.24511249783653138f64),
        (0.8515625f64, -0.23181567522307361f64),
        (0.859375f64, -0.21864028647534034f64),
        (0.8671875f64, -0.20558413364989397f64),
        (0.875f64, -0.19264507794239585f64),
        (0.8828125f64, -0.17982103758481227f64),
        (0.890625f64, -0.16710998583525827f64),
        (0.8984375f64, -0.15450994905562476f64),
        (0.90625f64, -0.14201900487242786f64),
        (0.9140625f64, -0.12963528041659547f64),
        (0.921875f64, -0.11735695063815872f64),
        (0.9296875f64, -0.10518223669205647f64),
        (0.9375f64, -0.09310940439148145f64),
        (0.9453125f64, -0.08113676272540547f64),
        (0.953125f64, -0.06926266243711371f64),
        (0.9609375f64, -0.05748549466076011f64),
        (0.96875f64, -0.04580368961312478f64),
        (0.9765625f64, -0.03421571533791295f64),
        (0.984375f64, -0.022720076500083522f64),
        (0.9921875f64, -0.011315313227834143f64),
        (1f64, 0f64),
        (1.0078125f64, 0.011227255423254118f64),
        (1.015625f64, 0.0223678130284545f64),
        (1.0234375f64, 0.033423001537450266f64),
        (1.03125f64, 0.04439411935845343f64),
        (1.0390625f64, 0.05528243550118959f64),
        (1.046875f64, 0.06608919045777241f64),
        (1.0546875f64, 0.07681559705083087f64),
        (1.0625f64, 0.08746284125033939f64),
        (1.0703125f64, 0.09803208296052668f64),
        (1.078125f64, 0.10852445677816903f64),
        (1.0859375f64, 0.11894107272350739f64),
        (1.09375f64, 0.12928301694496644f64),
        (1.1015625f64, 0.13955135239879352f64),
        (1.109375f64, 0.14974711950468203f64),
        (1.1171875f64, 0.15987133677838938f64),
        (1.125f64, 0.16992500144231232f64),
        (1.1328125f64, 0.17990909001493444f64),
        (1.140625f64, 0.18982455888001717f64),
        (1.1484375f64, 0.19967234483636437f64),
        (1.15625f64, 0.20945336562894976f64),
        (1.1640625f64, 0.2191685204621615f64),
        (1.171875f64, 0.22881869049588083f64),
        (1.1796875f64, 0.23840473932507886f64),
        (1.1875f64, 0.24792751344358543f64),
        (1.1953125f64, 0.2573878426926517f64),
        (1.203125f64, 0.2667865406949013f64),
        (1.2109375f64, 0.2761244052742375f64),
        (1.21875f64, 0.2854022188622483f64),
        (1.2265625f64, 0.2946207488916269f64),
        (1.234375f64, 0.3037807481771029f64),
        (1.2421875f64, 0.3128829552843553f64),
        (1.25f64, 0.32192809488736224f64),
        (1.2578125f64, 0.3309168781146169f64),
        (1.265625f64, 0.33985000288462464f64),
        (1.2734375f64, 0.34872815423107745f64),
        (1.28125f64, 0.3575520046180836f64),
        (1.2890625f64, 0.3663222142458157f64),
        (1.296875f64, 0.37503943134692463f64),
        (1.3046875f64, 0.38370429247405213f64),
        (1.3125f64, 0.3923174227787602f64),
        (1.3203125f64, 0.4008794362821842f64),
        (1.328125f64, 0.40939093613770167f64),
        (1.3359375f64, 0.41785251488589775f64),
        (1.34375f64, 0.42626475470209785f64),
        (1.3515625f64, 0.43462822763672454f64),
        (1.359375f64, 0.44294349584872816f64),
        (1.3671875f64, 0.45121111183232865f64),
        (1.375f64, 0.45943161863729715f64),
        (1.3828125f64, 0.4676055500829973f64),
        (1.390625f64, 0.47573343096639764f64),
        (1.3984375f64, 0.4838157772642563f64),
        (1.40625f64, 0.49185309632967456f64),
        (1.4140625f64, 0.4998458870832052f64),
        (1.421875f64, 0.5077946401986961f64),
        (1.4296875f64, 0.5156998382840423f64),
        (1.4375f64, 0.5235619560570128f64),
        (1.4453125f64, 0.5313814605163121f64),
        (1.453125f64, 0.5391588111080313f64),
        (1.4609375f64, 0.5468944598876365f64),
        (1.46875f64, 0.5545888516776373f64),
        (1.4765625f64, 0.5622424242210725f64),
        (1.484375f64, 0.5698556083309477f64),
        (1.4921875f64, 0.5774288280357486f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.log(2.0);
        let y2 = log(x as f64, 2.0) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.log(2.0);
        let y2 = log(x as f64, 2.0) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_log_e() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.log(std::f64::consts::E);
        let y2 = log(x as f64, std::f64::consts::E as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.log(std::f64::consts::E);
        let y2 = log(x as f64, std::f64::consts::E as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_powf_2() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, 0.25787353515625f64),
        (0.515625f64, 0.265869140625f64),
        (0.5234375f64, 0.27398681640625f64),
        (0.53125f64, 0.2822265625f64),
        (0.5390625f64, 0.29058837890625f64),
        (0.546875f64, 0.299072265625f64),
        (0.5546875f64, 0.30767822265625f64),
        (0.5625f64, 0.31640625f64),
        (0.5703125f64, 0.32525634765625f64),
        (0.578125f64, 0.334228515625f64),
        (0.5859375f64, 0.34332275390625f64),
        (0.59375f64, 0.3525390625f64),
        (0.6015625f64, 0.36187744140625f64),
        (0.609375f64, 0.371337890625f64),
        (0.6171875f64, 0.38092041015625f64),
        (0.625f64, 0.390625f64),
        (0.6328125f64, 0.40045166015625f64),
        (0.640625f64, 0.410400390625f64),
        (0.6484375f64, 0.42047119140625f64),
        (0.65625f64, 0.4306640625f64),
        (0.6640625f64, 0.44097900390625f64),
        (0.671875f64, 0.451416015625f64),
        (0.6796875f64, 0.46197509765625f64),
        (0.6875f64, 0.47265625f64),
        (0.6953125f64, 0.48345947265625f64),
        (0.703125f64, 0.494384765625f64),
        (0.7109375f64, 0.50543212890625f64),
        (0.71875f64, 0.5166015625f64),
        (0.7265625f64, 0.52789306640625f64),
        (0.734375f64, 0.539306640625f64),
        (0.7421875f64, 0.55084228515625f64),
        (0.75f64, 0.5625f64),
        (0.7578125f64, 0.57427978515625f64),
        (0.765625f64, 0.586181640625f64),
        (0.7734375f64, 0.59820556640625f64),
        (0.78125f64, 0.6103515625f64),
        (0.7890625f64, 0.6226196289062499f64),
        (0.796875f64, 0.635009765625f64),
        (0.8046875f64, 0.64752197265625f64),
        (0.8125f64, 0.66015625f64),
        (0.8203125f64, 0.67291259765625f64),
        (0.828125f64, 0.685791015625f64),
        (0.8359375f64, 0.69879150390625f64),
        (0.84375f64, 0.7119140625f64),
        (0.8515625f64, 0.72515869140625f64),
        (0.859375f64, 0.738525390625f64),
        (0.8671875f64, 0.75201416015625f64),
        (0.875f64, 0.7656249999999999f64),
        (0.8828125f64, 0.77935791015625f64),
        (0.890625f64, 0.793212890625f64),
        (0.8984375f64, 0.80718994140625f64),
        (0.90625f64, 0.8212890625f64),
        (0.9140625f64, 0.83551025390625f64),
        (0.921875f64, 0.8498535156249999f64),
        (0.9296875f64, 0.86431884765625f64),
        (0.9375f64, 0.87890625f64),
        (0.9453125f64, 0.89361572265625f64),
        (0.953125f64, 0.908447265625f64),
        (0.9609375f64, 0.9234008789062499f64),
        (0.96875f64, 0.9384765625f64),
        (0.9765625f64, 0.9536743164062499f64),
        (0.984375f64, 0.9689941406249999f64),
        (0.9921875f64, 0.98443603515625f64),
        (1f64, 1f64),
        (1.0078125f64, 1.01568603515625f64),
        (1.015625f64, 1.031494140625f64),
        (1.0234375f64, 1.04742431640625f64),
        (1.03125f64, 1.0634765625f64),
        (1.0390625f64, 1.07965087890625f64),
        (1.046875f64, 1.0959472656249998f64),
        (1.0546875f64, 1.11236572265625f64),
        (1.0625f64, 1.1289062499999998f64),
        (1.0703125f64, 1.1455688476562498f64),
        (1.078125f64, 1.1623535156249998f64),
        (1.0859375f64, 1.17926025390625f64),
        (1.09375f64, 1.1962890625f64),
        (1.1015625f64, 1.2134399414062498f64),
        (1.109375f64, 1.230712890625f64),
        (1.1171875f64, 1.24810791015625f64),
        (1.125f64, 1.265625f64),
        (1.1328125f64, 1.28326416015625f64),
        (1.140625f64, 1.3010253906249998f64),
        (1.1484375f64, 1.31890869140625f64),
        (1.15625f64, 1.3369140625f64),
        (1.1640625f64, 1.35504150390625f64),
        (1.171875f64, 1.373291015625f64),
        (1.1796875f64, 1.3916625976562498f64),
        (1.1875f64, 1.41015625f64),
        (1.1953125f64, 1.4287719726562498f64),
        (1.203125f64, 1.447509765625f64),
        (1.2109375f64, 1.46636962890625f64),
        (1.21875f64, 1.4853515624999998f64),
        (1.2265625f64, 1.5044555664062498f64),
        (1.234375f64, 1.5236816406249998f64),
        (1.2421875f64, 1.54302978515625f64),
        (1.25f64, 1.5624999999999998f64),
        (1.2578125f64, 1.58209228515625f64),
        (1.265625f64, 1.601806640625f64),
        (1.2734375f64, 1.6216430664062498f64),
        (1.28125f64, 1.6416015625f64),
        (1.2890625f64, 1.66168212890625f64),
        (1.296875f64, 1.681884765625f64),
        (1.3046875f64, 1.70220947265625f64),
        (1.3125f64, 1.7226562499999998f64),
        (1.3203125f64, 1.7432250976562498f64),
        (1.328125f64, 1.763916015625f64),
        (1.3359375f64, 1.78472900390625f64),
        (1.34375f64, 1.8056640624999998f64),
        (1.3515625f64, 1.82672119140625f64),
        (1.359375f64, 1.847900390625f64),
        (1.3671875f64, 1.8692016601562498f64),
        (1.375f64, 1.890625f64),
        (1.3828125f64, 1.91217041015625f64),
        (1.390625f64, 1.9338378906249998f64),
        (1.3984375f64, 1.9556274414062498f64),
        (1.40625f64, 1.9775390625f64),
        (1.4140625f64, 1.9995727539062498f64),
        (1.421875f64, 2.021728515625f64),
        (1.4296875f64, 2.04400634765625f64),
        (1.4375f64, 2.0664062499999996f64),
        (1.4453125f64, 2.08892822265625f64),
        (1.453125f64, 2.111572265625f64),
        (1.4609375f64, 2.13433837890625f64),
        (1.46875f64, 2.1572265624999996f64),
        (1.4765625f64, 2.18023681640625f64),
        (1.484375f64, 2.203369140625f64),
        (1.4921875f64, 2.22662353515625f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.powf(2.0);
        let y2 = powf(x as f64, 2.0) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 18014398509481984f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.powf(2.0);
        let y2 = powf(x as f64, 2.0) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 18014398509481984f64);
}
#[test]
fn test_powf_m1() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, 1.9692307692307691f64),
        (0.515625f64, 1.9393939393939392f64),
        (0.5234375f64, 1.9104477611940298f64),
        (0.53125f64, 1.8823529411764706f64),
        (0.5390625f64, 1.8550724637681157f64),
        (0.546875f64, 1.8285714285714285f64),
        (0.5546875f64, 1.8028169014084505f64),
        (0.5625f64, 1.7777777777777777f64),
        (0.5703125f64, 1.7534246575342463f64),
        (0.578125f64, 1.7297297297297296f64),
        (0.5859375f64, 1.7066666666666666f64),
        (0.59375f64, 1.6842105263157892f64),
        (0.6015625f64, 1.6623376623376622f64),
        (0.609375f64, 1.641025641025641f64),
        (0.6171875f64, 1.6202531645569618f64),
        (0.625f64, 1.6f64),
        (0.6328125f64, 1.5802469135802468f64),
        (0.640625f64, 1.5609756097560974f64),
        (0.6484375f64, 1.542168674698795f64),
        (0.65625f64, 1.5238095238095237f64),
        (0.6640625f64, 1.5058823529411762f64),
        (0.671875f64, 1.4883720930232556f64),
        (0.6796875f64, 1.4712643678160917f64),
        (0.6875f64, 1.4545454545454544f64),
        (0.6953125f64, 1.4382022471910112f64),
        (0.703125f64, 1.422222222222222f64),
        (0.7109375f64, 1.4065934065934065f64),
        (0.71875f64, 1.391304347826087f64),
        (0.7265625f64, 1.3763440860215053f64),
        (0.734375f64, 1.3617021276595742f64),
        (0.7421875f64, 1.3473684210526313f64),
        (0.75f64, 1.333333333333333f64),
        (0.7578125f64, 1.3195876288659794f64),
        (0.765625f64, 1.3061224489795917f64),
        (0.7734375f64, 1.2929292929292928f64),
        (0.78125f64, 1.28f64),
        (0.7890625f64, 1.2673267326732671f64),
        (0.796875f64, 1.2549019607843137f64),
        (0.8046875f64, 1.2427184466019416f64),
        (0.8125f64, 1.2307692307692308f64),
        (0.8203125f64, 1.219047619047619f64),
        (0.828125f64, 1.2075471698113207f64),
        (0.8359375f64, 1.1962616822429906f64),
        (0.84375f64, 1.1851851851851851f64),
        (0.8515625f64, 1.1743119266055044f64),
        (0.859375f64, 1.1636363636363636f64),
        (0.8671875f64, 1.153153153153153f64),
        (0.875f64, 1.1428571428571428f64),
        (0.8828125f64, 1.1327433628318584f64),
        (0.890625f64, 1.1228070175438596f64),
        (0.8984375f64, 1.1130434782608696f64),
        (0.90625f64, 1.1034482758620687f64),
        (0.9140625f64, 1.094017094017094f64),
        (0.921875f64, 1.0847457627118642f64),
        (0.9296875f64, 1.0756302521008403f64),
        (0.9375f64, 1.0666666666666664f64),
        (0.9453125f64, 1.0578512396694213f64),
        (0.953125f64, 1.0491803278688523f64),
        (0.9609375f64, 1.040650406504065f64),
        (0.96875f64, 1.032258064516129f64),
        (0.9765625f64, 1.024f64),
        (0.984375f64, 1.0158730158730158f64),
        (0.9921875f64, 1.0078740157480315f64),
        (1f64, 1f64),
        (1.0078125f64, 0.9922480620155038f64),
        (1.015625f64, 0.9846153846153846f64),
        (1.0234375f64, 0.9770992366412213f64),
        (1.03125f64, 0.9696969696969696f64),
        (1.0390625f64, 0.9624060150375939f64),
        (1.046875f64, 0.9552238805970149f64),
        (1.0546875f64, 0.9481481481481481f64),
        (1.0625f64, 0.9411764705882353f64),
        (1.0703125f64, 0.9343065693430656f64),
        (1.078125f64, 0.9275362318840579f64),
        (1.0859375f64, 0.9208633093525179f64),
        (1.09375f64, 0.9142857142857143f64),
        (1.1015625f64, 0.9078014184397163f64),
        (1.109375f64, 0.9014084507042253f64),
        (1.1171875f64, 0.8951048951048951f64),
        (1.125f64, 0.8888888888888888f64),
        (1.1328125f64, 0.882758620689655f64),
        (1.140625f64, 0.8767123287671231f64),
        (1.1484375f64, 0.8707482993197277f64),
        (1.15625f64, 0.8648648648648648f64),
        (1.1640625f64, 0.8590604026845637f64),
        (1.171875f64, 0.8533333333333333f64),
        (1.1796875f64, 0.8476821192052979f64),
        (1.1875f64, 0.8421052631578946f64),
        (1.1953125f64, 0.8366013071895424f64),
        (1.203125f64, 0.8311688311688311f64),
        (1.2109375f64, 0.8258064516129032f64),
        (1.21875f64, 0.8205128205128206f64),
        (1.2265625f64, 0.8152866242038216f64),
        (1.234375f64, 0.8101265822784809f64),
        (1.2421875f64, 0.8050314465408803f64),
        (1.25f64, 0.8f64),
        (1.2578125f64, 0.7950310559006211f64),
        (1.265625f64, 0.7901234567901234f64),
        (1.2734375f64, 0.7852760736196318f64),
        (1.28125f64, 0.7804878048780487f64),
        (1.2890625f64, 0.7757575757575756f64),
        (1.296875f64, 0.7710843373493975f64),
        (1.3046875f64, 0.7664670658682634f64),
        (1.3125f64, 0.7619047619047619f64),
        (1.3203125f64, 0.757396449704142f64),
        (1.328125f64, 0.7529411764705881f64),
        (1.3359375f64, 0.7485380116959064f64),
        (1.34375f64, 0.7441860465116278f64),
        (1.3515625f64, 0.7398843930635838f64),
        (1.359375f64, 0.7356321839080459f64),
        (1.3671875f64, 0.7314285714285714f64),
        (1.375f64, 0.7272727272727272f64),
        (1.3828125f64, 0.7231638418079096f64),
        (1.390625f64, 0.7191011235955056f64),
        (1.3984375f64, 0.7150837988826816f64),
        (1.40625f64, 0.711111111111111f64),
        (1.4140625f64, 0.7071823204419889f64),
        (1.421875f64, 0.7032967032967032f64),
        (1.4296875f64, 0.6994535519125683f64),
        (1.4375f64, 0.6956521739130435f64),
        (1.4453125f64, 0.6918918918918918f64),
        (1.453125f64, 0.6881720430107526f64),
        (1.4609375f64, 0.6844919786096256f64),
        (1.46875f64, 0.6808510638297871f64),
        (1.4765625f64, 0.6772486772486771f64),
        (1.484375f64, 0.6736842105263157f64),
        (1.4921875f64, 0.6701570680628272f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.powf(-1.0);
        let y2 = powf(x as f64, -1.0) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 18014398509481984f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.powf(-1.0);
        let y2 = powf(x as f64, -1.0) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 18014398509481984f64);
}
#[test]
fn test_powi_2() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, 0.25787353515625f64),
        (0.515625f64, 0.265869140625f64),
        (0.5234375f64, 0.27398681640625f64),
        (0.53125f64, 0.2822265625f64),
        (0.5390625f64, 0.29058837890625f64),
        (0.546875f64, 0.299072265625f64),
        (0.5546875f64, 0.30767822265625f64),
        (0.5625f64, 0.31640625f64),
        (0.5703125f64, 0.32525634765625f64),
        (0.578125f64, 0.334228515625f64),
        (0.5859375f64, 0.34332275390625f64),
        (0.59375f64, 0.3525390625f64),
        (0.6015625f64, 0.36187744140625f64),
        (0.609375f64, 0.371337890625f64),
        (0.6171875f64, 0.38092041015625f64),
        (0.625f64, 0.390625f64),
        (0.6328125f64, 0.40045166015625f64),
        (0.640625f64, 0.410400390625f64),
        (0.6484375f64, 0.42047119140625f64),
        (0.65625f64, 0.4306640625f64),
        (0.6640625f64, 0.44097900390625f64),
        (0.671875f64, 0.451416015625f64),
        (0.6796875f64, 0.46197509765625f64),
        (0.6875f64, 0.47265625f64),
        (0.6953125f64, 0.48345947265625f64),
        (0.703125f64, 0.494384765625f64),
        (0.7109375f64, 0.50543212890625f64),
        (0.71875f64, 0.5166015625f64),
        (0.7265625f64, 0.52789306640625f64),
        (0.734375f64, 0.539306640625f64),
        (0.7421875f64, 0.55084228515625f64),
        (0.75f64, 0.5625f64),
        (0.7578125f64, 0.57427978515625f64),
        (0.765625f64, 0.586181640625f64),
        (0.7734375f64, 0.59820556640625f64),
        (0.78125f64, 0.6103515625f64),
        (0.7890625f64, 0.6226196289062499f64),
        (0.796875f64, 0.635009765625f64),
        (0.8046875f64, 0.64752197265625f64),
        (0.8125f64, 0.66015625f64),
        (0.8203125f64, 0.67291259765625f64),
        (0.828125f64, 0.685791015625f64),
        (0.8359375f64, 0.69879150390625f64),
        (0.84375f64, 0.7119140625f64),
        (0.8515625f64, 0.72515869140625f64),
        (0.859375f64, 0.738525390625f64),
        (0.8671875f64, 0.75201416015625f64),
        (0.875f64, 0.7656249999999999f64),
        (0.8828125f64, 0.77935791015625f64),
        (0.890625f64, 0.793212890625f64),
        (0.8984375f64, 0.80718994140625f64),
        (0.90625f64, 0.8212890625f64),
        (0.9140625f64, 0.83551025390625f64),
        (0.921875f64, 0.8498535156249999f64),
        (0.9296875f64, 0.86431884765625f64),
        (0.9375f64, 0.87890625f64),
        (0.9453125f64, 0.89361572265625f64),
        (0.953125f64, 0.908447265625f64),
        (0.9609375f64, 0.9234008789062499f64),
        (0.96875f64, 0.9384765625f64),
        (0.9765625f64, 0.9536743164062499f64),
        (0.984375f64, 0.9689941406249999f64),
        (0.9921875f64, 0.98443603515625f64),
        (1f64, 1f64),
        (1.0078125f64, 1.01568603515625f64),
        (1.015625f64, 1.031494140625f64),
        (1.0234375f64, 1.04742431640625f64),
        (1.03125f64, 1.0634765625f64),
        (1.0390625f64, 1.07965087890625f64),
        (1.046875f64, 1.0959472656249998f64),
        (1.0546875f64, 1.11236572265625f64),
        (1.0625f64, 1.1289062499999998f64),
        (1.0703125f64, 1.1455688476562498f64),
        (1.078125f64, 1.1623535156249998f64),
        (1.0859375f64, 1.17926025390625f64),
        (1.09375f64, 1.1962890625f64),
        (1.1015625f64, 1.2134399414062498f64),
        (1.109375f64, 1.230712890625f64),
        (1.1171875f64, 1.24810791015625f64),
        (1.125f64, 1.265625f64),
        (1.1328125f64, 1.28326416015625f64),
        (1.140625f64, 1.3010253906249998f64),
        (1.1484375f64, 1.31890869140625f64),
        (1.15625f64, 1.3369140625f64),
        (1.1640625f64, 1.35504150390625f64),
        (1.171875f64, 1.373291015625f64),
        (1.1796875f64, 1.3916625976562498f64),
        (1.1875f64, 1.41015625f64),
        (1.1953125f64, 1.4287719726562498f64),
        (1.203125f64, 1.447509765625f64),
        (1.2109375f64, 1.46636962890625f64),
        (1.21875f64, 1.4853515624999998f64),
        (1.2265625f64, 1.5044555664062498f64),
        (1.234375f64, 1.5236816406249998f64),
        (1.2421875f64, 1.54302978515625f64),
        (1.25f64, 1.5624999999999998f64),
        (1.2578125f64, 1.58209228515625f64),
        (1.265625f64, 1.601806640625f64),
        (1.2734375f64, 1.6216430664062498f64),
        (1.28125f64, 1.6416015625f64),
        (1.2890625f64, 1.66168212890625f64),
        (1.296875f64, 1.681884765625f64),
        (1.3046875f64, 1.70220947265625f64),
        (1.3125f64, 1.7226562499999998f64),
        (1.3203125f64, 1.7432250976562498f64),
        (1.328125f64, 1.763916015625f64),
        (1.3359375f64, 1.78472900390625f64),
        (1.34375f64, 1.8056640624999998f64),
        (1.3515625f64, 1.82672119140625f64),
        (1.359375f64, 1.847900390625f64),
        (1.3671875f64, 1.8692016601562498f64),
        (1.375f64, 1.890625f64),
        (1.3828125f64, 1.91217041015625f64),
        (1.390625f64, 1.9338378906249998f64),
        (1.3984375f64, 1.9556274414062498f64),
        (1.40625f64, 1.9775390625f64),
        (1.4140625f64, 1.9995727539062498f64),
        (1.421875f64, 2.021728515625f64),
        (1.4296875f64, 2.04400634765625f64),
        (1.4375f64, 2.0664062499999996f64),
        (1.4453125f64, 2.08892822265625f64),
        (1.453125f64, 2.111572265625f64),
        (1.4609375f64, 2.13433837890625f64),
        (1.46875f64, 2.1572265624999996f64),
        (1.4765625f64, 2.18023681640625f64),
        (1.484375f64, 2.203369140625f64),
        (1.4921875f64, 2.22662353515625f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.powi(2);
        let y2 = powi(x as f64, 2) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.powi(2);
        let y2 = powi(x as f64, 2) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_powi_3() {
    let accurate_values: &[(f64, f64)] = &[
        (0.12843749999999998f64, 0.0021187295837402343f64),
        (0.136875f64, 0.0025643210449218753f64),
        (0.1453125f64, 0.003068378448486328f64),
        (0.15375f64, 0.003634505859375f64),
        (0.16218749999999998f64, 0.004266307342529296f64),
        (0.170625f64, 0.004967386962890626f64),
        (0.1790625f64, 0.00574134878540039f64),
        (0.1875f64, 0.006591796875f64),
        (0.1959375f64, 0.007522335296630859f64),
        (0.204375f64, 0.008536568115234375f64),
        (0.21281250000000002f64, 0.009638099395751951f64),
        (0.22125f64, 0.010830533203125001f64),
        (0.2296875f64, 0.01211747360229492f64),
        (0.238125f64, 0.013502524658203126f64),
        (0.24656250000000002f64, 0.014989290435791015f64),
        (0.255f64, 0.016581375000000002f64),
        (0.2634375f64, 0.018282382415771483f64),
        (0.271875f64, 0.020095916748046876f64),
        (0.2803125f64, 0.022025582061767576f64),
        (0.28875f64, 0.024074982421875002f64),
        (0.2971875f64, 0.026247721893310545f64),
        (0.30562500000000004f64, 0.028547404541015627f64),
        (0.3140625f64, 0.030977634429931636f64),
        (0.3225f64, 0.033542015625f64),
        (0.3309375f64, 0.03624415219116211f64),
        (0.339375f64, 0.03908764819335938f64),
        (0.3478125f64, 0.042076107696533194f64),
        (0.35625f64, 0.045213134765625f64),
        (0.3646875f64, 0.04850233346557616f64),
        (0.37312500000000004f64, 0.05194730786132813f64),
        (0.3815625f64, 0.055551662017822266f64),
        (0.39f64, 0.059319f64),
        (0.3984375f64, 0.06325292587280273f64),
        (0.406875f64, 0.06735704370117188f64),
        (0.41531250000000003f64, 0.07163495755004883f64),
        (0.42375f64, 0.076090271484375f64),
        (0.4321875f64, 0.08072658956909179f64),
        (0.44062500000000004f64, 0.08554751586914063f64),
        (0.44906250000000003f64, 0.09055665444946288f64),
        (0.4575f64, 0.095757609375f64),
        (0.4659375f64, 0.10115398471069334f64),
        (0.474375f64, 0.10674938452148437f64),
        (0.48281250000000003f64, 0.11254741287231444f64),
        (0.49125f64, 0.11855167382812501f64),
        (0.4996875f64, 0.12476577145385741f64),
        (0.508125f64, 0.13119330981445312f64),
        (0.5165625f64, 0.13783789297485352f64),
        (0.525f64, 0.14470312500000002f64),
        (0.5334375f64, 0.15179260995483398f64),
        (0.541875f64, 0.1591099519042969f64),
        (0.5503125f64, 0.16665875491333004f64),
        (0.5587500000000001f64, 0.17444262304687508f64),
        (0.5671875f64, 0.18246516036987304f64),
        (0.575625f64, 0.1907299709472657f64),
        (0.5840625f64, 0.1992406588439941f64),
        (0.5925f64, 0.208000828125f64),
        (0.6009375f64, 0.21701408285522458f64),
        (0.609375f64, 0.2262840270996094f64),
        (0.6178125000000001f64, 0.23581426492309582f64),
        (0.6262500000000001f64, 0.24560840039062512f64),
        (0.6346875000000001f64, 0.25567003756713874f64),
        (0.6431250000000001f64, 0.2660027805175782f64),
        (0.6515625f64, 0.2766102333068847f64),
        (0.66f64, 0.287496f64),
        (0.6684375f64, 0.2986636846618652f64),
        (0.676875f64, 0.31011689135742193f64),
        (0.6853125f64, 0.32185922415161133f64),
        (0.69375f64, 0.333894287109375f64),
        (0.7021875000000001f64, 0.3462256842956544f64),
        (0.7106250000000001f64, 0.35885701977539075f64),
        (0.7190625f64, 0.3717918976135253f64),
        (0.7275f64, 0.3850339218749999f64),
        (0.7359375f64, 0.3985866966247558f64),
        (0.744375f64, 0.41245382592773444f64),
        (0.7528125f64, 0.42663891384887687f64),
        (0.7612500000000001f64, 0.44114556445312514f64),
        (0.7696875000000001f64, 0.4559773818054201f64),
        (0.7781250000000001f64, 0.4711379699707033f64),
        (0.7865625f64, 0.4866309330139162f64),
        (0.795f64, 0.5024598749999999f64),
        (0.8034375f64, 0.5186283999938964f64),
        (0.811875f64, 0.5351401120605468f64),
        (0.8203125f64, 0.5519986152648925f64),
        (0.82875f64, 0.5692075136718749f64),
        (0.8371875000000001f64, 0.5867704113464357f64),
        (0.8456250000000001f64, 0.6046909123535158f64),
        (0.8540625000000001f64, 0.6229726207580568f64),
        (0.8625f64, 0.641619140625f64),
        (0.8709375f64, 0.660634076019287f64),
        (0.879375f64, 0.6800210310058594f64),
        (0.8878125f64, 0.6997836096496581f64),
        (0.8962500000000001f64, 0.7199254160156252f64),
        (0.9046875000000001f64, 0.7404500541687014f64),
        (0.9131250000000001f64, 0.7613611281738284f64),
        (0.9215625000000001f64, 0.7826622420959475f64),
        (0.93f64, 0.8043569999999999f64),
        (0.9384375f64, 0.8264490059509277f64),
        (0.946875f64, 0.8489418640136718f64),
        (0.9553125f64, 0.8718391782531737f64),
        (0.96375f64, 0.895144552734375f64),
        (0.9721875000000001f64, 0.9188615915222169f64),
        (0.9806250000000001f64, 0.9429938986816409f64),
        (0.9890625000000001f64, 0.9675450782775881f64),
        (0.9975f64, 0.9925187343750003f64),
        (1.0059375f64, 1.0179184710388183f64),
        (1.014375f64, 1.0437478923339842f64),
        (1.0228125000000001f64, 1.0700106023254392f64),
        (1.03125f64, 1.096710205078125f64),
        (1.0396875f64, 1.1238503046569823f64),
        (1.0481250000000002f64, 1.151434505126953f64),
        (1.0565625f64, 1.1794664105529784f64),
        (1.065f64, 1.207949625f64),
        (1.0734375f64, 1.2368877525329587f64),
        (1.0818750000000001f64, 1.266284397216797f64),
        (1.0903125f64, 1.296143163116455f64),
        (1.09875f64, 1.326467654296875f64),
        (1.1071875000000002f64, 1.3572614748229979f64),
        (1.115625f64, 1.3885282287597656f64),
        (1.1240625f64, 1.420271520172119f64),
        (1.1325000000000003f64, 1.452494953125f64),
        (1.1409375000000002f64, 1.4852021316833495f64),
        (1.149375f64, 1.5183966599121095f64),
        (1.1578125f64, 1.5520821418762205f64),
        (1.1662500000000002f64, 1.5862621816406248f64),
        (1.1746875f64, 1.6209403832702634f64),
        (1.183125f64, 1.6561203508300784f64),
        (1.1915624999999999f64, 1.6918056883850097f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.powi(3);
        let y2 = powi(x as f64, 3) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 18014398509481984f64);
    const N: i32 = 0x100000;
    let tmin = 0.12f64;
    let tmax = 1.2f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.powi(3);
        let y2 = powi(x as f64, 3) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 18014398509481984f64);
}
#[test]
fn test_powi_m1() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, 1.9692307692307691f64),
        (0.515625f64, 1.9393939393939392f64),
        (0.5234375f64, 1.9104477611940298f64),
        (0.53125f64, 1.8823529411764706f64),
        (0.5390625f64, 1.8550724637681157f64),
        (0.546875f64, 1.8285714285714285f64),
        (0.5546875f64, 1.8028169014084505f64),
        (0.5625f64, 1.7777777777777777f64),
        (0.5703125f64, 1.7534246575342463f64),
        (0.578125f64, 1.7297297297297296f64),
        (0.5859375f64, 1.7066666666666666f64),
        (0.59375f64, 1.6842105263157892f64),
        (0.6015625f64, 1.6623376623376622f64),
        (0.609375f64, 1.641025641025641f64),
        (0.6171875f64, 1.6202531645569618f64),
        (0.625f64, 1.6f64),
        (0.6328125f64, 1.5802469135802468f64),
        (0.640625f64, 1.5609756097560974f64),
        (0.6484375f64, 1.542168674698795f64),
        (0.65625f64, 1.5238095238095237f64),
        (0.6640625f64, 1.5058823529411762f64),
        (0.671875f64, 1.4883720930232556f64),
        (0.6796875f64, 1.4712643678160917f64),
        (0.6875f64, 1.4545454545454544f64),
        (0.6953125f64, 1.4382022471910112f64),
        (0.703125f64, 1.422222222222222f64),
        (0.7109375f64, 1.4065934065934065f64),
        (0.71875f64, 1.391304347826087f64),
        (0.7265625f64, 1.3763440860215053f64),
        (0.734375f64, 1.3617021276595742f64),
        (0.7421875f64, 1.3473684210526313f64),
        (0.75f64, 1.333333333333333f64),
        (0.7578125f64, 1.3195876288659794f64),
        (0.765625f64, 1.3061224489795917f64),
        (0.7734375f64, 1.2929292929292928f64),
        (0.78125f64, 1.28f64),
        (0.7890625f64, 1.2673267326732671f64),
        (0.796875f64, 1.2549019607843137f64),
        (0.8046875f64, 1.2427184466019416f64),
        (0.8125f64, 1.2307692307692308f64),
        (0.8203125f64, 1.219047619047619f64),
        (0.828125f64, 1.2075471698113207f64),
        (0.8359375f64, 1.1962616822429906f64),
        (0.84375f64, 1.1851851851851851f64),
        (0.8515625f64, 1.1743119266055044f64),
        (0.859375f64, 1.1636363636363636f64),
        (0.8671875f64, 1.153153153153153f64),
        (0.875f64, 1.1428571428571428f64),
        (0.8828125f64, 1.1327433628318584f64),
        (0.890625f64, 1.1228070175438596f64),
        (0.8984375f64, 1.1130434782608696f64),
        (0.90625f64, 1.1034482758620687f64),
        (0.9140625f64, 1.094017094017094f64),
        (0.921875f64, 1.0847457627118642f64),
        (0.9296875f64, 1.0756302521008403f64),
        (0.9375f64, 1.0666666666666664f64),
        (0.9453125f64, 1.0578512396694213f64),
        (0.953125f64, 1.0491803278688523f64),
        (0.9609375f64, 1.040650406504065f64),
        (0.96875f64, 1.032258064516129f64),
        (0.9765625f64, 1.024f64),
        (0.984375f64, 1.0158730158730158f64),
        (0.9921875f64, 1.0078740157480315f64),
        (1f64, 1f64),
        (1.0078125f64, 0.9922480620155038f64),
        (1.015625f64, 0.9846153846153846f64),
        (1.0234375f64, 0.9770992366412213f64),
        (1.03125f64, 0.9696969696969696f64),
        (1.0390625f64, 0.9624060150375939f64),
        (1.046875f64, 0.9552238805970149f64),
        (1.0546875f64, 0.9481481481481481f64),
        (1.0625f64, 0.9411764705882353f64),
        (1.0703125f64, 0.9343065693430656f64),
        (1.078125f64, 0.9275362318840579f64),
        (1.0859375f64, 0.9208633093525179f64),
        (1.09375f64, 0.9142857142857143f64),
        (1.1015625f64, 0.9078014184397163f64),
        (1.109375f64, 0.9014084507042253f64),
        (1.1171875f64, 0.8951048951048951f64),
        (1.125f64, 0.8888888888888888f64),
        (1.1328125f64, 0.882758620689655f64),
        (1.140625f64, 0.8767123287671231f64),
        (1.1484375f64, 0.8707482993197277f64),
        (1.15625f64, 0.8648648648648648f64),
        (1.1640625f64, 0.8590604026845637f64),
        (1.171875f64, 0.8533333333333333f64),
        (1.1796875f64, 0.8476821192052979f64),
        (1.1875f64, 0.8421052631578946f64),
        (1.1953125f64, 0.8366013071895424f64),
        (1.203125f64, 0.8311688311688311f64),
        (1.2109375f64, 0.8258064516129032f64),
        (1.21875f64, 0.8205128205128206f64),
        (1.2265625f64, 0.8152866242038216f64),
        (1.234375f64, 0.8101265822784809f64),
        (1.2421875f64, 0.8050314465408803f64),
        (1.25f64, 0.8f64),
        (1.2578125f64, 0.7950310559006211f64),
        (1.265625f64, 0.7901234567901234f64),
        (1.2734375f64, 0.7852760736196318f64),
        (1.28125f64, 0.7804878048780487f64),
        (1.2890625f64, 0.7757575757575756f64),
        (1.296875f64, 0.7710843373493975f64),
        (1.3046875f64, 0.7664670658682634f64),
        (1.3125f64, 0.7619047619047619f64),
        (1.3203125f64, 0.757396449704142f64),
        (1.328125f64, 0.7529411764705881f64),
        (1.3359375f64, 0.7485380116959064f64),
        (1.34375f64, 0.7441860465116278f64),
        (1.3515625f64, 0.7398843930635838f64),
        (1.359375f64, 0.7356321839080459f64),
        (1.3671875f64, 0.7314285714285714f64),
        (1.375f64, 0.7272727272727272f64),
        (1.3828125f64, 0.7231638418079096f64),
        (1.390625f64, 0.7191011235955056f64),
        (1.3984375f64, 0.7150837988826816f64),
        (1.40625f64, 0.711111111111111f64),
        (1.4140625f64, 0.7071823204419889f64),
        (1.421875f64, 0.7032967032967032f64),
        (1.4296875f64, 0.6994535519125683f64),
        (1.4375f64, 0.6956521739130435f64),
        (1.4453125f64, 0.6918918918918918f64),
        (1.453125f64, 0.6881720430107526f64),
        (1.4609375f64, 0.6844919786096256f64),
        (1.46875f64, 0.6808510638297871f64),
        (1.4765625f64, 0.6772486772486771f64),
        (1.484375f64, 0.6736842105263157f64),
        (1.4921875f64, 0.6701570680628272f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.powi(-1);
        let y2 = powi(x as f64, -1) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.powi(-1);
        let y2 = powi(x as f64, -1) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_powi_m2() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, 3.8778698224852066f64),
        (0.515625f64, 3.761248852157943f64),
        (0.5234375f64, 3.6498106482512807f64),
        (0.53125f64, 3.543252595155709f64),
        (0.5390625f64, 3.4412938458307076f64),
        (0.546875f64, 3.343673469387755f64),
        (0.5546875f64, 3.250148780003967f64),
        (0.5625f64, 3.1604938271604937f64),
        (0.5703125f64, 3.0744980296490896f64),
        (0.578125f64, 2.991964937910884f64),
        (0.5859375f64, 2.9127111111111113f64),
        (0.59375f64, 2.8365650969529086f64),
        (0.6015625f64, 2.763366503626244f64),
        (0.609375f64, 2.6929651545036157f64),
        (0.6171875f64, 2.62522031725685f64),
        (0.625f64, 2.56f64),
        (0.6328125f64, 2.497180307879896f64),
        (0.640625f64, 2.4366448542534203f64),
        (0.6484375f64, 2.378284221222238f64),
        (0.65625f64, 2.3219954648526073f64),
        (0.6640625f64, 2.2676816608996537f64),
        (0.671875f64, 2.215251487290427f64),
        (0.6796875f64, 2.1646188400052844f64),
        (0.6875f64, 2.1157024793388426f64),
        (0.6953125f64, 2.0684257038252745f64),
        (0.703125f64, 2.0227160493827157f64),
        (0.7109375f64, 1.9785050114720442f64),
        (0.71875f64, 1.935727788279773f64),
        (0.7265625f64, 1.894323043126373f64),
        (0.734375f64, 1.854232684472612f64),
        (0.7421875f64, 1.8154016620498614f64),
        (0.75f64, 1.7777777777777777f64),
        (0.7578125f64, 1.7413115102561376f64),
        (0.765625f64, 1.7059558517284463f64),
        (0.7734375f64, 1.6716661565146413f64),
        (0.78125f64, 1.6383999999999999f64),
        (0.7890625f64, 1.606117047348299f64),
        (0.796875f64, 1.574778931180315f64),
        (0.8046875f64, 1.5443491375247431f64),
        (0.8125f64, 1.514792899408284f64),
        (0.8203125f64, 1.4860770975056687f64),
        (0.828125f64, 1.4581701673193306f64),
        (0.8359375f64, 1.4310420124028298f64),
        (0.84375f64, 1.4046639231824414f64),
        (0.8515625f64, 1.3790085009679318f64),
        (0.859375f64, 1.3540495867768594f64),
        (0.8671875f64, 1.3297621946270595f64),
        (0.875f64, 1.3061224489795917f64),
        (0.8828125f64, 1.283107526039627f64),
        (0.890625f64, 1.260695598645737f64),
        (0.8984375f64, 1.2388657844990547f64),
        (0.90625f64, 1.2175980975029725f64),
        (0.9140625f64, 1.196873402001607f64),
        (0.921875f64, 1.1766733697213443f64),
        (0.9296875f64, 1.1569804392345173f64),
        (0.9375f64, 1.1377777777777778f64),
        (0.9453125f64, 1.1190492452701317f64),
        (0.953125f64, 1.1007793603869926f64),
        (0.9609375f64, 1.0829532685570757f64),
        (0.96875f64, 1.0655567117585847f64),
        (0.9765625f64, 1.048576f64),
        (0.984375f64, 1.0319979843789366f64),
        (0.9921875f64, 1.0158100316200631f64),
        (1f64, 1f64),
        (1.0078125f64, 0.9845562165735232f64),
        (1.015625f64, 0.9694674556213017f64),
        (1.0234375f64, 0.9547229182448574f64),
        (1.03125f64, 0.9403122130394858f64),
        (1.0390625f64, 0.9262253377805415f64),
        (1.046875f64, 0.9124526620628202f64),
        (1.0546875f64, 0.8989849108367626f64),
        (1.0625f64, 0.8858131487889273f64),
        (1.0703125f64, 0.8729287655176087f64),
        (1.078125f64, 0.8603234614576769f64),
        (1.0859375f64, 0.8479892345116711f64),
        (1.09375f64, 0.8359183673469388f64),
        (1.1015625f64, 0.8241034153211607f64),
        (1.109375f64, 0.8125371950009918f64),
        (1.1171875f64, 0.8012127732407451f64),
        (1.125f64, 0.7901234567901234f64),
        (1.1328125f64, 0.7792627824019025f64),
        (1.140625f64, 0.7686245074122724f64),
        (1.1484375f64, 0.7582026007681983f64),
        (1.15625f64, 0.747991234477721f64),
        (1.1640625f64, 0.7379847754605648f64),
        (1.171875f64, 0.7281777777777778f64),
        (1.1796875f64, 0.718564975220385f64),
        (1.1875f64, 0.7091412742382271f64),
        (1.1953125f64, 0.6999017471912511f64),
        (1.203125f64, 0.690841625906561f64),
        (1.2109375f64, 0.6819562955254942f64),
        (1.21875f64, 0.6732412886259039f64),
        (1.2265625f64, 0.6646922796056635f64),
        (1.234375f64, 0.6563050793142124f64),
        (1.2421875f64, 0.6480756299197025f64),
        (1.25f64, 0.64f64),
        (1.2578125f64, 0.6320743798464565f64),
        (1.265625f64, 0.624295076969974f64),
        (1.2734375f64, 0.6166585117994655f64),
        (1.28125f64, 0.6091612135633551f64),
        (1.2890625f64, 0.6017998163452708f64),
        (1.296875f64, 0.5945710553055595f64),
        (1.3046875f64, 0.5874717630607049f64),
        (1.3125f64, 0.5804988662131518f64),
        (1.3203125f64, 0.5736493820244389f64),
        (1.328125f64, 0.5669204152249134f64),
        (1.3359375f64, 0.5603091549536608f64),
        (1.34375f64, 0.5538128718226067f64),
        (1.3515625f64, 0.5474289150990678f64),
        (1.359375f64, 0.5411547100013211f64),
        (1.3671875f64, 0.5349877551020408f64),
        (1.375f64, 0.5289256198347106f64),
        (1.3828125f64, 0.5229659420983752f64),
        (1.390625f64, 0.5171064259563186f64),
        (1.3984375f64, 0.5113448394244873f64),
        (1.40625f64, 0.5056790123456789f64),
        (1.4140625f64, 0.5001068343457159f64),
        (1.421875f64, 0.4946262528680111f64),
        (1.4296875f64, 0.48923527128310784f64),
        (1.4375f64, 0.48393194706994325f64),
        (1.4453125f64, 0.4787143900657414f64),
        (1.453125f64, 0.4735807607815932f64),
        (1.4609375f64, 0.4685292687809202f64),
        (1.46875f64, 0.463558171118153f64),
        (1.4765625f64, 0.458665770835083f64),
        (1.484375f64, 0.45385041551246535f64),
        (1.4921875f64, 0.44911049587456475f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.powi(-2);
        let y2 = powi(x as f64, -2) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 27021597764222976f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.powi(-2);
        let y2 = powi(x as f64, -2) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 27021597764222976f64);
}
#[test]
fn test_powi_16() {
    let accurate_values: &[(f64, f64)] = &[
        (0.255859375f64, 0.00000000033730389396499997f64),
        (0.26171875f64, 0.000000000484570976299f64),
        (0.267578125f64, 0.0000000006905731662849999f64),
        (0.2734375f64, 0.000000000976628053646f64),
        (0.279296875f64, 0.000000001371062409193f64),
        (0.28515625f64, 0.000000001911288809064f64),
        (0.291015625f64, 0.0000000026464330950119997f64),
        (0.296875f64, 0.0000000036406424737629997f64),
        (0.302734375f64, 0.0000000049772309737239995f64),
        (0.30859375f64, 0.000000006763850745256999f64),
        (0.314453125f64, 0.000000009138915060478f64),
        (0.3203125f64, 0.000000012279542686363998f64),
        (0.326171875f64, 0.000000016411344524413997f64),
        (0.33203125f64, 0.000000021820433103227996f64),
        (0.337890625f64, 0.000000028868104879617998f64),
        (0.34375f64, 0.000000038008725695196f64),
        (0.349609375f64, 0.000000049811442652041f64),
        (0.35546875f64, 0.00000006498645278902099f64),
        (0.361328125f64, 0.00000008441668212393399f64),
        (0.3671875f64, 0.00000010919586994657099f64),
        (0.373046875f64, 0.000000140674214999259f64),
        (0.37890625f64, 0.00000018051292490433498f64),
        (0.384765625f64, 0.00000023074922069837298f64),
        (0.390625f64, 0.000000293873587705572f64),
        (0.396484375f64, 0.000000372921335635655f64),
        (0.40234375f64, 0.000000471580838472193f64),
        (0.408203125f64, 0.000000594321172539668f64),
        (0.4140625f64, 0.0000007465422636124719f64),
        (0.419921875f64, 0.0000009347510959947069f64),
        (0.42578125f64, 0.0000011667680335554558f64),
        (0.431640625f64, 0.0000014519678606458329f64),
        (0.4375f64, 0.0000018015607760810668f64),
        (0.443359375f64, 0.000002228919272946058f64),
        (0.44921875f64, 0.0000027499576184947716f64),
        (0.455078125f64, 0.0000033835715201408765f64),
        (0.4609375f64, 0.0000041521465344645205f64),
        (0.466796875f64, 0.000005082144856029914f64),
        (0.47265625f64, 0.000006204781322171226f64),
        (0.478515625f64, 0.000007556800800174976f64),
        (0.484375f64, 0.000009181370596802861f64),
        (0.490234375f64, 0.00001112910316018053f64),
        (0.49609375f64, 0.000013459226145094028f64),
        (0.501953125f64, 0.000016240918900171327f64),
        (0.5078125f64, 0.000019554836625953743f64),
        (0.513671875f64, 0.00002349484586441516f64),
        (0.51953125f64, 0.000028169997632341274f64),
        (0.525390625f64, 0.000033706767423834806f64),
        (0.53125f64, 0.000040251594503274535f64),
        (0.537109375f64, 0.00004797375641313482f64),
        (0.54296875f64, 0.00005706861845667312f64),
        (0.548828125f64, 0.0000677613021109153f64),
        (0.5546875f64, 0.00008031082090981199f64),
        (0.560546875f64, 0.00009501473734211003f64),
        (0.56640625f64, 0.00011221439976671087f64),
        (0.572265625f64, 0.00013230082429564294f64),
        (0.578125f64, 0.00015572129306918995f64),
        (0.583984375f64, 0.00018298674738962434f64),
        (0.58984375f64, 0.0002146800618324507f64),
        (0.595703125f64, 0.00025146529376289983f64),
        (0.6015625f64, 0.0002940980116993772f64),
        (0.607421875f64, 0.0003434368157364781f64),
        (0.61328125f64, 0.0004004561738230884f64),
        (0.619140625f64, 0.00046626070914443433f64),
        (0.625f64, 0.0005421010862427521f64),
        (0.630859375f64, 0.0006293916568952775f64),
        (0.63671875f64, 0.0007297300412202073f64),
        (0.642578125f64, 0.0008449188350750061f64),
        (0.6484375f64, 0.0009769896516250655f64),
        (0.654296875f64, 0.00112822972307701f64),
        (0.66015625f64, 0.0013012113080773193f64),
        (0.666015625f64, 0.001498824171265894f64),
        (0.671875f64, 0.0017243114240433875f64),
        (0.677734375f64, 0.0019813090398637114f64),
        (0.68359375f64, 0.002273889383407966f64),
        (0.689453125f64, 0.0026066091209479923f64),
        (0.6953125f64, 0.0029845619091878797f64),
        (0.701171875f64, 0.0034134362920077202f64),
        (0.70703125f64, 0.003899579268960132f64),
        (0.712890625f64, 0.004450066036228158f64),
        (0.71875f64, 0.005072776440192085f64),
        (0.724609375f64, 0.00577647872592929f64),
        (0.73046875f64, 0.006570921208050289f64),
        (0.736328125f64, 0.007466932539429055f64),
        (0.7421875f64, 0.008476531304798345f64),
        (0.748046875f64, 0.00961304572104279f64),
        (0.75390625f64, 0.010891244284534307f64),
        (0.759765625f64, 0.012327478268227013f64),
        (0.765625f64, 0.013939837037683134f64),
        (0.771484375f64, 0.015748317225969588f64),
        (0.77734375f64, 0.017775006882689497f64),
        (0.783203125f64, 0.020044285792549195f64),
        (0.7890625f64, 0.022583043244075587f64),
        (0.794921875f64, 0.02542091461967086f64),
        (0.80078125f64, 0.028590538274413393f64),
        (0.806640625f64, 0.03212783427319229f64),
        (0.8125f64, 0.03607230666421707f64),
        (0.818359375f64, 0.040467371082009936f64),
        (0.82421875f64, 0.045360709595014384f64),
        (0.830078125f64, 0.050804654842307596f64),
        (0.8359375f64, 0.056856605640965875f64),
        (0.841796875f64, 0.06357947639080311f64),
        (0.84765625f64, 0.0710421827568965f64),
        (0.853515625f64, 0.07932016627296809f64),
        (0.859375f64, 0.08849596068075803f64),
        (0.865234375f64, 0.09865980300247848f64),
        (0.87109375f64, 0.10991029253577132f64),
        (0.876953125f64, 0.12235510116381992f64),
        (0.8828125f64, 0.1361117385879243f64),
        (0.888671875f64, 0.15130837631649605f64),
        (0.89453125f64, 0.16808473448364863f64),
        (0.900390625f64, 0.18659303582295464f64),
        (0.90625f64, 0.20699903138814482f64),
        (0.912109375f64, 0.22948310289319263f64),
        (0.91796875f64, 0.25424144684004324f64),
        (0.923828125f64, 0.28148734591392033f64),
        (0.9296875f64, 0.31145253345441437f64),
        (0.935546875f64, 0.34438865715619293f64),
        (0.94140625f64, 0.38056884851697276f64),
        (0.947265625f64, 0.4202894049331884f64),
        (0.953125f64, 0.46387159174644044f64),
        (0.958984375f64, 0.5116635719672092f64),
        (0.96484375f64, 0.564042471847399f64),
        (0.970703125f64, 0.6214165909410088f64),
        (0.9765625f64, 0.6842277657836021f64),
        (0.982421875f64, 0.7529538968373106f64),
        (0.98828125f64, 0.8281116488899426f64),
        (0.994140625f64, 0.9102593356654778f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.powi(16);
        let y2 = powi(x as f64, 16) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 31525197391593470f64);
    const N: i32 = 0x100000;
    let tmin = 0.25f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.powi(16);
        let y2 = powi(x as f64, 16) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 31525197391593470f64);
}
#[test]
fn test_cosh() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.cosh();
        let y2 = cosh(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.cosh();
        let y2 = cosh(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_sinh() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.sinh();
        let y2 = sinh(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.sinh();
        let y2 = sinh(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_tanh() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.tanh();
        let y2 = tanh(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.tanh();
        let y2 = tanh(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_acosh() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.acosh();
        let y2 = acosh(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.acosh();
        let y2 = acosh(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_asinh() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.asinh();
        let y2 = asinh(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.asinh();
        let y2 = asinh(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_atanh() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.atanh();
        let y2 = atanh(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -0.9f64;
    let tmax = 0.9f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.atanh();
        let y2 = atanh(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_hypot_a() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.hypot(1.0);
        let y2 = hypot(x as f64, 1.0) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.hypot(1.0);
        let y2 = hypot(x as f64, 1.0) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_hypot_b() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.hypot(-1.0);
        let y2 = hypot(x as f64, -1.0) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.hypot(-1.0);
        let y2 = hypot(x as f64, -1.0) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_hypot_c() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = (1.0_f64).hypot(x);
        let y2 = hypot(1.0, x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = (1.0_f64).hypot(x);
        let y2 = hypot(1.0, x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_hypot_d() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = (-1.0_f64).hypot(x);
        let y2 = hypot(-1.0, x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 13510798882111488f64);
    const N: i32 = 0x100000;
    let tmin = -1f64;
    let tmax = 1f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = (-1.0_f64).hypot(x);
        let y2 = hypot(-1.0, x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 13510798882111488f64);
}
#[test]
fn test_sqrt() {
    let accurate_values: &[(f64, f64)] = &[
        (0.51171875f64, 0.7153451963912246f64),
        (0.5234375f64, 0.7234898064243889f64),
        (0.53515625f64, 0.7315437444199764f64),
        (0.546875f64, 0.7395099728874519f64),
        (0.55859375f64, 0.7473912964438372f64),
        (0.5703125f64, 0.7551903733496605f64),
        (0.58203125f64, 0.7629097259833563f64),
        (0.59375f64, 0.7705517503711219f64),
        (0.60546875f64, 0.7781187248742957f64),
        (0.6171875f64, 0.7856128181235332f64),
        (0.62890625f64, 0.7930360962780948f64),
        (0.640625f64, 0.8003905296791058f64),
        (0.65234375f64, 0.8076779989575051f64),
        (0.6640625f64, 0.8149003006503309f64),
        (0.67578125f64, 0.8220591523728689f64),
        (0.6875f64, 0.8291561975888497f64),
        (0.69921875f64, 0.8361930100162281f64),
        (0.7109375f64, 0.8431710977020024f64),
        (0.72265625f64, 0.850091906795965f64),
        (0.734375f64, 0.8569568250501303f64),
        (0.74609375f64, 0.8637671850678281f64),
        (0.7578125f64, 0.8705242673240073f64),
        (0.76953125f64, 0.8772293029761372f64),
        (0.78125f64, 0.8838834764831842f64),
        (0.79296875f64, 0.8904879280484378f64),
        (0.8046875f64, 0.8970437559004575f64),
        (0.81640625f64, 0.9035520184250598f64),
        (0.828125f64, 0.9100137361600645f64),
        (0.83984375f64, 0.9164298936634485f64),
        (0.8515625f64, 0.9228014412645873f64),
        (0.86328125f64, 0.9291292967074064f64),
        (0.875f64, 0.9354143466934852f64),
        (0.88671875f64, 0.94165744833246f64),
        (0.8984375f64, 0.9478594305064437f64),
        (0.91015625f64, 0.954021095154609f64),
        (0.921875f64, 0.9601432184835759f64),
        (0.93359375f64, 0.966226552108769f64),
        (0.9453125f64, 0.9722718241315026f64),
        (0.95703125f64, 0.9782797401561577f64),
        (0.96875f64, 0.9842509842514762f64),
        (0.98046875f64, 0.9901862198596784f64),
        (0.9921875f64, 0.9960860906568264f64),
        (1.00390625f64, 1.0019512213675872f64),
        (1.015625f64, 1.0077822185373184f64),
        (1.02734375f64, 1.0135796712641783f64),
        (1.0390625f64, 1.0193441518937554f64),
        (1.05078125f64, 1.025076216678545f64),
        (1.0625f64, 1.030776406404415f64),
        (1.07421875f64, 1.036445246986062f64),
        (1.0859375f64, 1.0420832500333164f64),
        (1.09765625f64, 1.047690913390013f64),
        (1.109375f64, 1.0532687216470447f64),
        (1.12109375f64, 1.0588171466310883f64),
        (1.1328125f64, 1.0643366478704f64),
        (1.14453125f64, 1.0698276730389804f64),
        (1.15625f64, 1.0752906583803281f64),
        (1.16796875f64, 1.0807260291119112f64),
        (1.1796875f64, 1.086134199811423f64),
        (1.19140625f64, 1.091515574785811f64),
        (1.203125f64, 1.096870548424015f64),
        (1.21484375f64, 1.1021995055342746f64),
        (1.2265625f64, 1.1075028216668341f64),
        (1.23828125f64, 1.1127808634228034f64),
        (1.25f64, 1.1180339887498947f64),
        (1.26171875f64, 1.123262547225714f64),
        (1.2734375f64, 1.1284668803292366f64),
        (1.28515625f64, 1.1336473217010659f64),
        (1.296875f64, 1.138804197393037f64),
        (1.30859375f64, 1.1439378261076953f64),
        (1.3203125f64, 1.1490485194281395f64),
        (1.33203125f64, 1.1541365820387115f64),
        (1.34375f64, 1.1592023119369628f64),
        (1.35546875f64, 1.1642460006373223f64),
        (1.3671875f64, 1.1692679333668565f64),
        (1.37890625f64, 1.1742683892534957f64),
        (1.390625f64, 1.1792476415070754f64),
        (1.40234375f64, 1.1842059575935258f64),
        (1.4140625f64, 1.189143599402528f64),
        (1.42578125f64, 1.194060823408925f64),
        (1.4375f64, 1.1989578808281798f64),
        (1.44921875f64, 1.2038350177661385f64),
        (1.4609375f64, 1.2086924753633572f64),
        (1.47265625f64, 1.2135304899342247f64),
        (1.484375f64, 1.2183492931011204f64),
        (1.49609375f64, 1.2231491119238078f64),
        (1.5078125f64, 1.227930169024281f64),
        (1.51953125f64, 1.232692682707251f64),
        (1.53125f64, 1.237436867076458f64),
        (1.54296875f64, 1.2421629321469867f64),
        (1.5546875f64, 1.24687108395375f64),
        (1.56640625f64, 1.2515615246562988f64),
        (1.578125f64, 1.256234452640111f64),
        (1.58984375f64, 1.2608900626145008f64),
        (1.6015625f64, 1.2655285457072865f64),
        (1.61328125f64, 1.270150089556348f64),
        (1.625f64, 1.274754878398196f64),
        (1.63671875f64, 1.2793430931536698f64),
        (1.6484375f64, 1.2839149115108832f64),
        (1.66015625f64, 1.2884705080055188f64),
        (1.671875f64, 1.2930100540985747f64),
        (1.68359375f64, 1.297533718251668f64),
        (1.6953125f64, 1.3020416659999783f64),
        (1.70703125f64, 1.3065340600229292f64),
        (1.71875f64, 1.3110110602126892f64),
        (1.73046875f64, 1.315472823740574f64),
        (1.7421875f64, 1.3199195051214294f64),
        (1.75390625f64, 1.324351256276068f64),
        (1.765625f64, 1.3287682265918308f64),
        (1.77734375f64, 1.333170562981346f64),
        (1.7890625f64, 1.3375584099395432f64),
        (1.80078125f64, 1.3419319095989928f64),
        (1.8125f64, 1.3462912017836257f64),
        (1.82421875f64, 1.3506364240608941f64),
        (1.8359375f64, 1.3549677117924248f64),
        (1.84765625f64, 1.3592851981832215f64),
        (1.859375f64, 1.363589014329464f64),
        (1.87109375f64, 1.3678792892649552f64),
        (1.8828125f64, 1.3721561500062591f64),
        (1.89453125f64, 1.3764197215965772f64),
        (1.90625f64, 1.3806701271484072f64),
        (1.91796875f64, 1.3849074878850207f64),
        (1.9296875f64, 1.3891319231808041f64),
        (1.94140625f64, 1.393343550600497f64),
        (1.953125f64, 1.3975424859373682f64),
        (1.96484375f64, 1.4017288432503625f64),
        (1.9765625f64, 1.4059027349002486f64),
        (1.98828125f64, 1.4100642715848095f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.sqrt();
        let y2 = sqrt(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 4503599627370496f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 2f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.sqrt();
        let y2 = sqrt(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 4503599627370496f64);
}
#[test]
fn test_cbrt() {
    let accurate_values: &[(f64, f64)] = &[];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.cbrt();
        let y2 = cbrt(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 4503599627370496f64);
    const N: i32 = 0x100000;
    let tmin = -2f64;
    let tmax = 2f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.cbrt();
        let y2 = cbrt(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 4503599627370496f64);
}
#[test]
fn test_recip() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, 1.969230769230769f64),
        (0.515625f64, 1.939393939393939f64),
        (0.5234375f64, 1.9104477611940294f64),
        (0.53125f64, 1.8823529411764703f64),
        (0.5390625f64, 1.8550724637681155f64),
        (0.546875f64, 1.828571428571428f64),
        (0.5546875f64, 1.8028169014084505f64),
        (0.5625f64, 1.7777777777777775f64),
        (0.5703125f64, 1.7534246575342463f64),
        (0.578125f64, 1.7297297297297294f64),
        (0.5859375f64, 1.7066666666666663f64),
        (0.59375f64, 1.6842105263157892f64),
        (0.6015625f64, 1.662337662337662f64),
        (0.609375f64, 1.6410256410256407f64),
        (0.6171875f64, 1.6202531645569618f64),
        (0.625f64, 1.5999999999999996f64),
        (0.6328125f64, 1.5802469135802466f64),
        (0.640625f64, 1.5609756097560972f64),
        (0.6484375f64, 1.5421686746987948f64),
        (0.65625f64, 1.5238095238095235f64),
        (0.6640625f64, 1.5058823529411762f64),
        (0.671875f64, 1.4883720930232553f64),
        (0.6796875f64, 1.4712643678160917f64),
        (0.6875f64, 1.4545454545454544f64),
        (0.6953125f64, 1.438202247191011f64),
        (0.703125f64, 1.4222222222222218f64),
        (0.7109375f64, 1.4065934065934063f64),
        (0.71875f64, 1.3913043478260867f64),
        (0.7265625f64, 1.376344086021505f64),
        (0.734375f64, 1.3617021276595742f64),
        (0.7421875f64, 1.3473684210526313f64),
        (0.75f64, 1.333333333333333f64),
        (0.7578125f64, 1.3195876288659791f64),
        (0.765625f64, 1.3061224489795915f64),
        (0.7734375f64, 1.2929292929292926f64),
        (0.78125f64, 1.2799999999999998f64),
        (0.7890625f64, 1.2673267326732671f64),
        (0.796875f64, 1.2549019607843135f64),
        (0.8046875f64, 1.2427184466019416f64),
        (0.8125f64, 1.2307692307692304f64),
        (0.8203125f64, 1.219047619047619f64),
        (0.828125f64, 1.2075471698113205f64),
        (0.8359375f64, 1.1962616822429906f64),
        (0.84375f64, 1.185185185185185f64),
        (0.8515625f64, 1.1743119266055042f64),
        (0.859375f64, 1.1636363636363634f64),
        (0.8671875f64, 1.153153153153153f64),
        (0.875f64, 1.1428571428571426f64),
        (0.8828125f64, 1.1327433628318582f64),
        (0.890625f64, 1.1228070175438596f64),
        (0.8984375f64, 1.1130434782608694f64),
        (0.90625f64, 1.1034482758620687f64),
        (0.9140625f64, 1.0940170940170937f64),
        (0.921875f64, 1.0847457627118642f64),
        (0.9296875f64, 1.07563025210084f64),
        (0.9375f64, 1.0666666666666664f64),
        (0.9453125f64, 1.0578512396694213f64),
        (0.953125f64, 1.0491803278688523f64),
        (0.9609375f64, 1.040650406504065f64),
        (0.96875f64, 1.0322580645161288f64),
        (0.9765625f64, 1.0239999999999998f64),
        (0.984375f64, 1.0158730158730156f64),
        (0.9921875f64, 1.0078740157480313f64),
        (1f64, 1f64),
        (1.0078125f64, 0.9922480620155035f64),
        (1.015625f64, 0.9846153846153843f64),
        (1.0234375f64, 0.9770992366412212f64),
        (1.03125f64, 0.9696969696969695f64),
        (1.0390625f64, 0.9624060150375938f64),
        (1.046875f64, 0.9552238805970146f64),
        (1.0546875f64, 0.948148148148148f64),
        (1.0625f64, 0.9411764705882352f64),
        (1.0703125f64, 0.9343065693430654f64),
        (1.078125f64, 0.9275362318840578f64),
        (1.0859375f64, 0.9208633093525177f64),
        (1.09375f64, 0.914285714285714f64),
        (1.1015625f64, 0.9078014184397162f64),
        (1.109375f64, 0.9014084507042252f64),
        (1.1171875f64, 0.895104895104895f64),
        (1.125f64, 0.8888888888888886f64),
        (1.1328125f64, 0.8827586206896548f64),
        (1.140625f64, 0.876712328767123f64),
        (1.1484375f64, 0.8707482993197276f64),
        (1.15625f64, 0.8648648648648647f64),
        (1.1640625f64, 0.8590604026845636f64),
        (1.171875f64, 0.8533333333333332f64),
        (1.1796875f64, 0.8476821192052978f64),
        (1.1875f64, 0.8421052631578946f64),
        (1.1953125f64, 0.8366013071895423f64),
        (1.203125f64, 0.8311688311688309f64),
        (1.2109375f64, 0.825806451612903f64),
        (1.21875f64, 0.8205128205128204f64),
        (1.2265625f64, 0.8152866242038215f64),
        (1.234375f64, 0.8101265822784808f64),
        (1.2421875f64, 0.8050314465408803f64),
        (1.25f64, 0.7999999999999998f64),
        (1.2578125f64, 0.795031055900621f64),
        (1.265625f64, 0.7901234567901232f64),
        (1.2734375f64, 0.7852760736196318f64),
        (1.28125f64, 0.7804878048780486f64),
        (1.2890625f64, 0.7757575757575755f64),
        (1.296875f64, 0.7710843373493974f64),
        (1.3046875f64, 0.7664670658682633f64),
        (1.3125f64, 0.7619047619047616f64),
        (1.3203125f64, 0.7573964497041419f64),
        (1.328125f64, 0.7529411764705881f64),
        (1.3359375f64, 0.7485380116959063f64),
        (1.34375f64, 0.7441860465116278f64),
        (1.3515625f64, 0.7398843930635837f64),
        (1.359375f64, 0.7356321839080459f64),
        (1.3671875f64, 0.7314285714285712f64),
        (1.375f64, 0.7272727272727271f64),
        (1.3828125f64, 0.7231638418079094f64),
        (1.390625f64, 0.7191011235955055f64),
        (1.3984375f64, 0.7150837988826814f64),
        (1.40625f64, 0.711111111111111f64),
        (1.4140625f64, 0.7071823204419888f64),
        (1.421875f64, 0.7032967032967031f64),
        (1.4296875f64, 0.6994535519125682f64),
        (1.4375f64, 0.6956521739130433f64),
        (1.4453125f64, 0.6918918918918917f64),
        (1.453125f64, 0.6881720430107525f64),
        (1.4609375f64, 0.6844919786096255f64),
        (1.46875f64, 0.680851063829787f64),
        (1.4765625f64, 0.6772486772486771f64),
        (1.484375f64, 0.6736842105263156f64),
        (1.4921875f64, 0.670157068062827f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.recip();
        let y2 = recip(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.recip();
        let y2 = recip(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_recip_n() {
    let accurate_values: &[(f64, f64)] = &[
        (-1.4921875f64, -0.670157068062827f64),
        (-1.484375f64, -0.6736842105263156f64),
        (-1.4765625f64, -0.6772486772486771f64),
        (-1.46875f64, -0.680851063829787f64),
        (-1.4609375f64, -0.6844919786096255f64),
        (-1.453125f64, -0.6881720430107525f64),
        (-1.4453125f64, -0.6918918918918917f64),
        (-1.4375f64, -0.6956521739130433f64),
        (-1.4296875f64, -0.6994535519125682f64),
        (-1.421875f64, -0.7032967032967031f64),
        (-1.4140625f64, -0.7071823204419888f64),
        (-1.40625f64, -0.711111111111111f64),
        (-1.3984375f64, -0.7150837988826814f64),
        (-1.390625f64, -0.7191011235955055f64),
        (-1.3828125f64, -0.7231638418079094f64),
        (-1.375f64, -0.7272727272727271f64),
        (-1.3671875f64, -0.7314285714285712f64),
        (-1.359375f64, -0.7356321839080459f64),
        (-1.3515625f64, -0.7398843930635837f64),
        (-1.34375f64, -0.7441860465116278f64),
        (-1.3359375f64, -0.7485380116959063f64),
        (-1.328125f64, -0.7529411764705881f64),
        (-1.3203125f64, -0.7573964497041419f64),
        (-1.3125f64, -0.7619047619047616f64),
        (-1.3046875f64, -0.7664670658682633f64),
        (-1.296875f64, -0.7710843373493974f64),
        (-1.2890625f64, -0.7757575757575755f64),
        (-1.28125f64, -0.7804878048780486f64),
        (-1.2734375f64, -0.7852760736196318f64),
        (-1.265625f64, -0.7901234567901232f64),
        (-1.2578125f64, -0.795031055900621f64),
        (-1.25f64, -0.7999999999999998f64),
        (-1.2421875f64, -0.8050314465408803f64),
        (-1.234375f64, -0.8101265822784808f64),
        (-1.2265625f64, -0.8152866242038215f64),
        (-1.21875f64, -0.8205128205128204f64),
        (-1.2109375f64, -0.825806451612903f64),
        (-1.203125f64, -0.8311688311688309f64),
        (-1.1953125f64, -0.8366013071895423f64),
        (-1.1875f64, -0.8421052631578946f64),
        (-1.1796875f64, -0.8476821192052978f64),
        (-1.171875f64, -0.8533333333333332f64),
        (-1.1640625f64, -0.8590604026845636f64),
        (-1.15625f64, -0.8648648648648647f64),
        (-1.1484375f64, -0.8707482993197276f64),
        (-1.140625f64, -0.876712328767123f64),
        (-1.1328125f64, -0.8827586206896548f64),
        (-1.125f64, -0.8888888888888886f64),
        (-1.1171875f64, -0.895104895104895f64),
        (-1.109375f64, -0.9014084507042252f64),
        (-1.1015625f64, -0.9078014184397162f64),
        (-1.09375f64, -0.914285714285714f64),
        (-1.0859375f64, -0.9208633093525177f64),
        (-1.078125f64, -0.9275362318840578f64),
        (-1.0703125f64, -0.9343065693430654f64),
        (-1.0625f64, -0.9411764705882352f64),
        (-1.0546875f64, -0.948148148148148f64),
        (-1.046875f64, -0.9552238805970146f64),
        (-1.0390625f64, -0.9624060150375938f64),
        (-1.03125f64, -0.9696969696969695f64),
        (-1.0234375f64, -0.9770992366412212f64),
        (-1.015625f64, -0.9846153846153843f64),
        (-1.0078125f64, -0.9922480620155035f64),
        (-1f64, -1f64),
        (-0.9921875f64, -1.0078740157480313f64),
        (-0.984375f64, -1.0158730158730156f64),
        (-0.9765625f64, -1.0239999999999998f64),
        (-0.96875f64, -1.0322580645161288f64),
        (-0.9609375f64, -1.040650406504065f64),
        (-0.953125f64, -1.0491803278688523f64),
        (-0.9453125f64, -1.0578512396694213f64),
        (-0.9375f64, -1.0666666666666664f64),
        (-0.9296875f64, -1.07563025210084f64),
        (-0.921875f64, -1.0847457627118642f64),
        (-0.9140625f64, -1.0940170940170937f64),
        (-0.90625f64, -1.1034482758620687f64),
        (-0.8984375f64, -1.1130434782608694f64),
        (-0.890625f64, -1.1228070175438596f64),
        (-0.8828125f64, -1.1327433628318582f64),
        (-0.875f64, -1.1428571428571426f64),
        (-0.8671875f64, -1.153153153153153f64),
        (-0.859375f64, -1.1636363636363634f64),
        (-0.8515625f64, -1.1743119266055042f64),
        (-0.84375f64, -1.185185185185185f64),
        (-0.8359375f64, -1.1962616822429906f64),
        (-0.828125f64, -1.2075471698113205f64),
        (-0.8203125f64, -1.219047619047619f64),
        (-0.8125f64, -1.2307692307692304f64),
        (-0.8046875f64, -1.2427184466019416f64),
        (-0.796875f64, -1.2549019607843135f64),
        (-0.7890625f64, -1.2673267326732671f64),
        (-0.78125f64, -1.2799999999999998f64),
        (-0.7734375f64, -1.2929292929292926f64),
        (-0.765625f64, -1.3061224489795915f64),
        (-0.7578125f64, -1.3195876288659791f64),
        (-0.75f64, -1.333333333333333f64),
        (-0.7421875f64, -1.3473684210526313f64),
        (-0.734375f64, -1.3617021276595742f64),
        (-0.7265625f64, -1.376344086021505f64),
        (-0.71875f64, -1.3913043478260867f64),
        (-0.7109375f64, -1.4065934065934063f64),
        (-0.703125f64, -1.4222222222222218f64),
        (-0.6953125f64, -1.438202247191011f64),
        (-0.6875f64, -1.4545454545454544f64),
        (-0.6796875f64, -1.4712643678160917f64),
        (-0.671875f64, -1.4883720930232553f64),
        (-0.6640625f64, -1.5058823529411762f64),
        (-0.65625f64, -1.5238095238095235f64),
        (-0.6484375f64, -1.5421686746987948f64),
        (-0.640625f64, -1.5609756097560972f64),
        (-0.6328125f64, -1.5802469135802466f64),
        (-0.625f64, -1.5999999999999996f64),
        (-0.6171875f64, -1.6202531645569618f64),
        (-0.609375f64, -1.6410256410256407f64),
        (-0.6015625f64, -1.662337662337662f64),
        (-0.59375f64, -1.6842105263157892f64),
        (-0.5859375f64, -1.7066666666666663f64),
        (-0.578125f64, -1.7297297297297294f64),
        (-0.5703125f64, -1.7534246575342463f64),
        (-0.5625f64, -1.7777777777777775f64),
        (-0.5546875f64, -1.8028169014084505f64),
        (-0.546875f64, -1.828571428571428f64),
        (-0.5390625f64, -1.8550724637681155f64),
        (-0.53125f64, -1.8823529411764703f64),
        (-0.5234375f64, -1.9104477611940294f64),
        (-0.515625f64, -1.939393939393939f64),
        (-0.5078125f64, -1.969230769230769f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.recip();
        let y2 = recip(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 9007199254740992f64);
    const N: i32 = 0x100000;
    let tmin = -1.5f64;
    let tmax = -0.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.recip();
        let y2 = recip(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 9007199254740992f64);
}
#[test]
fn test_recip_x() {
    let accurate_values: &[(f64, f64)] = &[
        (0.5078125f64, 1.969230769230769f64),
        (0.515625f64, 1.939393939393939f64),
        (0.5234375f64, 1.9104477611940294f64),
        (0.53125f64, 1.8823529411764703f64),
        (0.5390625f64, 1.8550724637681155f64),
        (0.546875f64, 1.828571428571428f64),
        (0.5546875f64, 1.8028169014084505f64),
        (0.5625f64, 1.7777777777777775f64),
        (0.5703125f64, 1.7534246575342463f64),
        (0.578125f64, 1.7297297297297294f64),
        (0.5859375f64, 1.7066666666666663f64),
        (0.59375f64, 1.6842105263157892f64),
        (0.6015625f64, 1.662337662337662f64),
        (0.609375f64, 1.6410256410256407f64),
        (0.6171875f64, 1.6202531645569618f64),
        (0.625f64, 1.5999999999999996f64),
        (0.6328125f64, 1.5802469135802466f64),
        (0.640625f64, 1.5609756097560972f64),
        (0.6484375f64, 1.5421686746987948f64),
        (0.65625f64, 1.5238095238095235f64),
        (0.6640625f64, 1.5058823529411762f64),
        (0.671875f64, 1.4883720930232553f64),
        (0.6796875f64, 1.4712643678160917f64),
        (0.6875f64, 1.4545454545454544f64),
        (0.6953125f64, 1.438202247191011f64),
        (0.703125f64, 1.4222222222222218f64),
        (0.7109375f64, 1.4065934065934063f64),
        (0.71875f64, 1.3913043478260867f64),
        (0.7265625f64, 1.376344086021505f64),
        (0.734375f64, 1.3617021276595742f64),
        (0.7421875f64, 1.3473684210526313f64),
        (0.75f64, 1.333333333333333f64),
        (0.7578125f64, 1.3195876288659791f64),
        (0.765625f64, 1.3061224489795915f64),
        (0.7734375f64, 1.2929292929292926f64),
        (0.78125f64, 1.2799999999999998f64),
        (0.7890625f64, 1.2673267326732671f64),
        (0.796875f64, 1.2549019607843135f64),
        (0.8046875f64, 1.2427184466019416f64),
        (0.8125f64, 1.2307692307692304f64),
        (0.8203125f64, 1.219047619047619f64),
        (0.828125f64, 1.2075471698113205f64),
        (0.8359375f64, 1.1962616822429906f64),
        (0.84375f64, 1.185185185185185f64),
        (0.8515625f64, 1.1743119266055042f64),
        (0.859375f64, 1.1636363636363634f64),
        (0.8671875f64, 1.153153153153153f64),
        (0.875f64, 1.1428571428571426f64),
        (0.8828125f64, 1.1327433628318582f64),
        (0.890625f64, 1.1228070175438596f64),
        (0.8984375f64, 1.1130434782608694f64),
        (0.90625f64, 1.1034482758620687f64),
        (0.9140625f64, 1.0940170940170937f64),
        (0.921875f64, 1.0847457627118642f64),
        (0.9296875f64, 1.07563025210084f64),
        (0.9375f64, 1.0666666666666664f64),
        (0.9453125f64, 1.0578512396694213f64),
        (0.953125f64, 1.0491803278688523f64),
        (0.9609375f64, 1.040650406504065f64),
        (0.96875f64, 1.0322580645161288f64),
        (0.9765625f64, 1.0239999999999998f64),
        (0.984375f64, 1.0158730158730156f64),
        (0.9921875f64, 1.0078740157480313f64),
        (1f64, 1f64),
        (1.0078125f64, 0.9922480620155035f64),
        (1.015625f64, 0.9846153846153843f64),
        (1.0234375f64, 0.9770992366412212f64),
        (1.03125f64, 0.9696969696969695f64),
        (1.0390625f64, 0.9624060150375938f64),
        (1.046875f64, 0.9552238805970146f64),
        (1.0546875f64, 0.948148148148148f64),
        (1.0625f64, 0.9411764705882352f64),
        (1.0703125f64, 0.9343065693430654f64),
        (1.078125f64, 0.9275362318840578f64),
        (1.0859375f64, 0.9208633093525177f64),
        (1.09375f64, 0.914285714285714f64),
        (1.1015625f64, 0.9078014184397162f64),
        (1.109375f64, 0.9014084507042252f64),
        (1.1171875f64, 0.895104895104895f64),
        (1.125f64, 0.8888888888888886f64),
        (1.1328125f64, 0.8827586206896548f64),
        (1.140625f64, 0.876712328767123f64),
        (1.1484375f64, 0.8707482993197276f64),
        (1.15625f64, 0.8648648648648647f64),
        (1.1640625f64, 0.8590604026845636f64),
        (1.171875f64, 0.8533333333333332f64),
        (1.1796875f64, 0.8476821192052978f64),
        (1.1875f64, 0.8421052631578946f64),
        (1.1953125f64, 0.8366013071895423f64),
        (1.203125f64, 0.8311688311688309f64),
        (1.2109375f64, 0.825806451612903f64),
        (1.21875f64, 0.8205128205128204f64),
        (1.2265625f64, 0.8152866242038215f64),
        (1.234375f64, 0.8101265822784808f64),
        (1.2421875f64, 0.8050314465408803f64),
        (1.25f64, 0.7999999999999998f64),
        (1.2578125f64, 0.795031055900621f64),
        (1.265625f64, 0.7901234567901232f64),
        (1.2734375f64, 0.7852760736196318f64),
        (1.28125f64, 0.7804878048780486f64),
        (1.2890625f64, 0.7757575757575755f64),
        (1.296875f64, 0.7710843373493974f64),
        (1.3046875f64, 0.7664670658682633f64),
        (1.3125f64, 0.7619047619047616f64),
        (1.3203125f64, 0.7573964497041419f64),
        (1.328125f64, 0.7529411764705881f64),
        (1.3359375f64, 0.7485380116959063f64),
        (1.34375f64, 0.7441860465116278f64),
        (1.3515625f64, 0.7398843930635837f64),
        (1.359375f64, 0.7356321839080459f64),
        (1.3671875f64, 0.7314285714285712f64),
        (1.375f64, 0.7272727272727271f64),
        (1.3828125f64, 0.7231638418079094f64),
        (1.390625f64, 0.7191011235955055f64),
        (1.3984375f64, 0.7150837988826814f64),
        (1.40625f64, 0.711111111111111f64),
        (1.4140625f64, 0.7071823204419888f64),
        (1.421875f64, 0.7032967032967031f64),
        (1.4296875f64, 0.6994535519125682f64),
        (1.4375f64, 0.6956521739130433f64),
        (1.4453125f64, 0.6918918918918917f64),
        (1.453125f64, 0.6881720430107525f64),
        (1.4609375f64, 0.6844919786096255f64),
        (1.46875f64, 0.680851063829787f64),
        (1.4765625f64, 0.6772486772486771f64),
        (1.484375f64, 0.6736842105263156f64),
        (1.4921875f64, 0.670157068062827f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.recip();
        let y2 = recip_approx(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 0.1f64);
    const N: i32 = 0x100000;
    let tmin = 0.5f64;
    let tmax = 1.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.recip();
        let y2 = recip_approx(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 0.1f64);
}
#[test]
fn test_recip_y() {
    let accurate_values: &[(f64, f64)] = &[
        (-1.4921875f64, -0.670157068062827f64),
        (-1.484375f64, -0.6736842105263156f64),
        (-1.4765625f64, -0.6772486772486771f64),
        (-1.46875f64, -0.680851063829787f64),
        (-1.4609375f64, -0.6844919786096255f64),
        (-1.453125f64, -0.6881720430107525f64),
        (-1.4453125f64, -0.6918918918918917f64),
        (-1.4375f64, -0.6956521739130433f64),
        (-1.4296875f64, -0.6994535519125682f64),
        (-1.421875f64, -0.7032967032967031f64),
        (-1.4140625f64, -0.7071823204419888f64),
        (-1.40625f64, -0.711111111111111f64),
        (-1.3984375f64, -0.7150837988826814f64),
        (-1.390625f64, -0.7191011235955055f64),
        (-1.3828125f64, -0.7231638418079094f64),
        (-1.375f64, -0.7272727272727271f64),
        (-1.3671875f64, -0.7314285714285712f64),
        (-1.359375f64, -0.7356321839080459f64),
        (-1.3515625f64, -0.7398843930635837f64),
        (-1.34375f64, -0.7441860465116278f64),
        (-1.3359375f64, -0.7485380116959063f64),
        (-1.328125f64, -0.7529411764705881f64),
        (-1.3203125f64, -0.7573964497041419f64),
        (-1.3125f64, -0.7619047619047616f64),
        (-1.3046875f64, -0.7664670658682633f64),
        (-1.296875f64, -0.7710843373493974f64),
        (-1.2890625f64, -0.7757575757575755f64),
        (-1.28125f64, -0.7804878048780486f64),
        (-1.2734375f64, -0.7852760736196318f64),
        (-1.265625f64, -0.7901234567901232f64),
        (-1.2578125f64, -0.795031055900621f64),
        (-1.25f64, -0.7999999999999998f64),
        (-1.2421875f64, -0.8050314465408803f64),
        (-1.234375f64, -0.8101265822784808f64),
        (-1.2265625f64, -0.8152866242038215f64),
        (-1.21875f64, -0.8205128205128204f64),
        (-1.2109375f64, -0.825806451612903f64),
        (-1.203125f64, -0.8311688311688309f64),
        (-1.1953125f64, -0.8366013071895423f64),
        (-1.1875f64, -0.8421052631578946f64),
        (-1.1796875f64, -0.8476821192052978f64),
        (-1.171875f64, -0.8533333333333332f64),
        (-1.1640625f64, -0.8590604026845636f64),
        (-1.15625f64, -0.8648648648648647f64),
        (-1.1484375f64, -0.8707482993197276f64),
        (-1.140625f64, -0.876712328767123f64),
        (-1.1328125f64, -0.8827586206896548f64),
        (-1.125f64, -0.8888888888888886f64),
        (-1.1171875f64, -0.895104895104895f64),
        (-1.109375f64, -0.9014084507042252f64),
        (-1.1015625f64, -0.9078014184397162f64),
        (-1.09375f64, -0.914285714285714f64),
        (-1.0859375f64, -0.9208633093525177f64),
        (-1.078125f64, -0.9275362318840578f64),
        (-1.0703125f64, -0.9343065693430654f64),
        (-1.0625f64, -0.9411764705882352f64),
        (-1.0546875f64, -0.948148148148148f64),
        (-1.046875f64, -0.9552238805970146f64),
        (-1.0390625f64, -0.9624060150375938f64),
        (-1.03125f64, -0.9696969696969695f64),
        (-1.0234375f64, -0.9770992366412212f64),
        (-1.015625f64, -0.9846153846153843f64),
        (-1.0078125f64, -0.9922480620155035f64),
        (-1f64, -1f64),
        (-0.9921875f64, -1.0078740157480313f64),
        (-0.984375f64, -1.0158730158730156f64),
        (-0.9765625f64, -1.0239999999999998f64),
        (-0.96875f64, -1.0322580645161288f64),
        (-0.9609375f64, -1.040650406504065f64),
        (-0.953125f64, -1.0491803278688523f64),
        (-0.9453125f64, -1.0578512396694213f64),
        (-0.9375f64, -1.0666666666666664f64),
        (-0.9296875f64, -1.07563025210084f64),
        (-0.921875f64, -1.0847457627118642f64),
        (-0.9140625f64, -1.0940170940170937f64),
        (-0.90625f64, -1.1034482758620687f64),
        (-0.8984375f64, -1.1130434782608694f64),
        (-0.890625f64, -1.1228070175438596f64),
        (-0.8828125f64, -1.1327433628318582f64),
        (-0.875f64, -1.1428571428571426f64),
        (-0.8671875f64, -1.153153153153153f64),
        (-0.859375f64, -1.1636363636363634f64),
        (-0.8515625f64, -1.1743119266055042f64),
        (-0.84375f64, -1.185185185185185f64),
        (-0.8359375f64, -1.1962616822429906f64),
        (-0.828125f64, -1.2075471698113205f64),
        (-0.8203125f64, -1.219047619047619f64),
        (-0.8125f64, -1.2307692307692304f64),
        (-0.8046875f64, -1.2427184466019416f64),
        (-0.796875f64, -1.2549019607843135f64),
        (-0.7890625f64, -1.2673267326732671f64),
        (-0.78125f64, -1.2799999999999998f64),
        (-0.7734375f64, -1.2929292929292926f64),
        (-0.765625f64, -1.3061224489795915f64),
        (-0.7578125f64, -1.3195876288659791f64),
        (-0.75f64, -1.333333333333333f64),
        (-0.7421875f64, -1.3473684210526313f64),
        (-0.734375f64, -1.3617021276595742f64),
        (-0.7265625f64, -1.376344086021505f64),
        (-0.71875f64, -1.3913043478260867f64),
        (-0.7109375f64, -1.4065934065934063f64),
        (-0.703125f64, -1.4222222222222218f64),
        (-0.6953125f64, -1.438202247191011f64),
        (-0.6875f64, -1.4545454545454544f64),
        (-0.6796875f64, -1.4712643678160917f64),
        (-0.671875f64, -1.4883720930232553f64),
        (-0.6640625f64, -1.5058823529411762f64),
        (-0.65625f64, -1.5238095238095235f64),
        (-0.6484375f64, -1.5421686746987948f64),
        (-0.640625f64, -1.5609756097560972f64),
        (-0.6328125f64, -1.5802469135802466f64),
        (-0.625f64, -1.5999999999999996f64),
        (-0.6171875f64, -1.6202531645569618f64),
        (-0.609375f64, -1.6410256410256407f64),
        (-0.6015625f64, -1.662337662337662f64),
        (-0.59375f64, -1.6842105263157892f64),
        (-0.5859375f64, -1.7066666666666663f64),
        (-0.578125f64, -1.7297297297297294f64),
        (-0.5703125f64, -1.7534246575342463f64),
        (-0.5625f64, -1.7777777777777775f64),
        (-0.5546875f64, -1.8028169014084505f64),
        (-0.546875f64, -1.828571428571428f64),
        (-0.5390625f64, -1.8550724637681155f64),
        (-0.53125f64, -1.8823529411764703f64),
        (-0.5234375f64, -1.9104477611940294f64),
        (-0.515625f64, -1.939393939393939f64),
        (-0.5078125f64, -1.969230769230769f64),
    ];
    let mut max_ref_error = 0.0_f64;
    let mut max_lib_error = 0.0_f64;
    for (x, y) in accurate_values {
        let x = *x;
        let y = *y;
        let y1 = x.recip();
        let y2 = recip_approx(x as f64) as f64;
        let eref = (y1 - y).abs();
        let elib = (y2 - y).abs();
        max_ref_error = max_ref_error.max(eref);
        max_lib_error = max_lib_error.max(elib);
        println!(
            " x={:25.20} y1={:25.20} y2={:25.20} eref={:25.20} elib={:25.20}",
            x, y1, y2, eref, elib
        );
    }
    println!(
        "# eref={:25.20} elib={:25.20}",
        max_ref_error, max_lib_error
    );
    assert!(!max_lib_error.is_nan());
    assert!(max_lib_error <= 0.1f64);
    const N: i32 = 0x100000;
    let tmin = -1.5f64;
    let tmax = -0.5f64;
    let mut max_error = 0.0_f64;
    let mut xmax = tmin;
    let mut y1max = 0.0;
    let mut y2max = 0.0;
    for i in 0..=N {
        let x = i as f64 * (tmax - tmin) / N as f64 + tmin;
        let y1 = x.recip();
        let y2 = recip_approx(x as f64) as f64;
        let error = (y1 - y2).abs();
        if error > max_error {
            max_error = error;
            xmax = x;
            y1max = y1;
            y2max = y2;
        }
        if i % (N / 16) == 0 {
            println!(
                " x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
                x,
                y1,
                y2,
                y2 - y1
            );
        }
    }
    println!(
        "!x={:25.20} y1={:25.20} y2={:25.20} e={:25.20}",
        xmax, y1max, y2max, max_error
    );
    assert!(!max_error.is_nan());
    assert!(max_error < 0.1f64);
}
