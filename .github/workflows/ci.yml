name: CI

on:
  pull_request:
  push:
    branches:
      - main

env:
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Rust ${{ matrix.rust }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { rust: stable,           os: ubuntu-latest }
          - { rust: stable,           os: macos-latest }
          - { rust: stable,           os: windows-latest }
          - { rust: stable-i686-msvc, os: windows-latest }
          - { rust: beta,             os: ubuntu-latest }
          - { rust: nightly,          os: ubuntu-latest }
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
          components: rustfmt
      - run: cargo test --verbose --workspace
      - run: cargo run --bin libmgen
      - name: Dump/Format the generated libm for debugging purposes
        run: |
          # Dump a formatted version to stdout, so that it can be inspected.
          rustfmt --emit=stdout tests/libm.rs
          # Also actually format it, to improve error output.
          rustfmt tests/libm.rs
      # Ensure the generated libm still passes tests
      - run: cargo test --verbose --workspace

  check-warnings:
    name: cargo check
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Dwarnings
    steps:
      - uses: actions/checkout@v2
      - uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - run: cargo check --workspace --all-targets --verbose
      - name: Regenerate libm
        run: |
          cargo run libmgen
          rustfmt --emit=stdout tests/libm.rs
          rustfmt tests/libm.rs
      # See if the new libm has warnings
      - run: cargo check --test libm
